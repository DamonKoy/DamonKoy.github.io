<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DamonKoy | 追赶着</title>
  
  
  <link href="https://damonkoy.github.io/atom.xml" rel="self"/>
  
  <link href="https://damonkoy.github.io/"/>
  <updated>2025-01-07T06:10:04.519Z</updated>
  <id>https://damonkoy.github.io/</id>
  
  <author>
    <name>DamonKoy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://damonkoy.github.io/2025/01/06/hexo%E4%B8%8Bnext%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%E8%B0%83%E6%95%B4/"/>
    <id>https://damonkoy.github.io/2025/01/06/hexo%E4%B8%8Bnext%E4%B8%BB%E9%A2%98%E6%A0%B7%E5%BC%8F%E8%B0%83%E6%95%B4/</id>
    <published>2025-01-06T08:18:39.395Z</published>
    <updated>2025-01-07T06:10:04.519Z</updated>
    
    <content type="html"><![CDATA[<p>建页面 配置后页面点击分类后会显示 Can not get &#x2F;tags&#x2F; （大概是这个报错）表示找不到页面，此时则需要进入 hexo 根目录，并执行下述命令创建页面：<br>hexo new page “categories”<br>hexo new page “tags”</p><p>此时根目录的 &#x2F;source 目录下会分别出现两个文件夹 categories 和 tags ，里面都有一个 index.md 文件，点击进入后为其添加 type ：<br>title: categories<br>date: 2023-08-11 16:22:41<br>type: categories # 填写对应的页面类型</p><p>此时重新编译运行即可。</p><p>七、添加搜索功能<br>1、安装 hexo-generator-searchdb 插件<br>css 代码解读复制代码$ npm install hexo-generator-searchdb –save</p><p>2、打开 站点配置文件 找到Extensions在下面添加<br>yaml 代码解读复制代码# 搜索<br>search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000</p><p>3、打开 主题配置文件 找到Local search，将enable设置为true</p><ol start="7"><li>图片点击放大预览</li></ol><h1 id="找到文件-themes-next-config-yml"><a href="#找到文件-themes-next-config-yml" class="headerlink" title="找到文件 &#x2F;themes&#x2F;next&#x2F;_config.yml"></a>找到文件 &#x2F;themes&#x2F;next&#x2F;_config.yml</h1><h1 id="修改以下代码"><a href="#修改以下代码" class="headerlink" title="修改以下代码"></a>修改以下代码</h1><p>fancybox: true</p><ol start="8"><li>图片懒加载</li></ol><h1 id="找到文件-themes-next-config-yml-1"><a href="#找到文件-themes-next-config-yml-1" class="headerlink" title="找到文件 &#x2F;themes&#x2F;next&#x2F;_config.yml"></a>找到文件 &#x2F;themes&#x2F;next&#x2F;_config.yml</h1><h1 id="增加以下代码"><a href="#增加以下代码" class="headerlink" title="增加以下代码"></a>增加以下代码</h1><p>lazyload: true</p><ol start="11"><li>添加字数统计及阅读时长</li></ol><h1 id="找到文件-themes-next-config-yml-2"><a href="#找到文件-themes-next-config-yml-2" class="headerlink" title="找到文件 &#x2F;themes&#x2F;next&#x2F;_config.yml"></a>找到文件 &#x2F;themes&#x2F;next&#x2F;_config.yml</h1><h1 id="增加以下代码-1"><a href="#增加以下代码-1" class="headerlink" title="增加以下代码"></a>增加以下代码</h1><p>readingtime:<br>  enable: true</p><ol start="12"><li>置顶文章<br>使用文章的top属性<br>编辑文章的 Front Matter：打开需要置顶的文章的 Markdown 源文件，在文章的 Front Matter（即文章开头用—包裹的部分）中添加top属性，并为其指定一个数值。数值越大，文章的置顶优先级越高。例如：<br>yaml</li></ol><p>title: 置顶文章标题<br>date: 2025-01-07 12:00:00<br>top: 100</p><p>更新文章显示顺序：完成文章top属性的设置后，重启 Hexo 服务器或者重新生成静态页面，Next 7 主题会根据文章的top属性值对文章进行排序，具有较高top值的文章将显示在页面的较上方位置，实现置顶效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;建页面 配置后页面点击分类后会显示 Can not get &amp;#x2F;tags&amp;#x2F; （大概是这个报错）表示找不到页面，此时则需要进入 hexo 根目录，并执行下述命令创建页面：&lt;br&gt;hexo new page “categories”&lt;br&gt;hexo new p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo框架搭建个人博客</title>
    <link href="https://damonkoy.github.io/2025/01/06/hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://damonkoy.github.io/2025/01/06/hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2025-01-06T08:18:20.000Z</published>
    <updated>2025-01-06T08:18:20.845Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>服务器安装docker</title>
    <link href="https://damonkoy.github.io/2025/01/04/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85docker/"/>
    <id>https://damonkoy.github.io/2025/01/04/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85docker/</id>
    <published>2025-01-04T09:26:37.000Z</published>
    <updated>2025-01-06T05:27:58.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器安装docker"><a href="#服务器安装docker" class="headerlink" title="服务器安装docker"></a>服务器安装docker</h2><h4 id="连接服务器："><a href="#连接服务器：" class="headerlink" title="连接服务器："></a>连接服务器：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh test@192.168.216.210</span><br></pre></td></tr></table></figure><h4 id="安装docker："><a href="#安装docker：" class="headerlink" title="安装docker："></a>安装docker：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker</span><br></pre></td></tr></table></figure><h4 id="安装后设置开机启动："><a href="#安装后设置开机启动：" class="headerlink" title="安装后设置开机启动："></a>安装后设置开机启动：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><h4 id="修改docker镜像源："><a href="#修改docker镜像源：" class="headerlink" title="修改docker镜像源："></a>修改docker镜像源：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;registry-mirrors&quot; : [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启docker："><a href="#重启docker：" class="headerlink" title="重启docker："></a>重启docker：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h4 id="在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如："><a href="#在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如：" class="headerlink" title="在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如："></a>在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/jenkins_node</span><br><span class="line">sudo chmod 777 /var/jenkins_node</span><br></pre></td></tr></table></figure><h4 id="拉取jenkins镜像："><a href="#拉取jenkins镜像：" class="headerlink" title="拉取jenkins镜像："></a>拉取jenkins镜像：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><h4 id="创建数据卷，用于持久化Jenkins容器的数据到宿主机"><a href="#创建数据卷，用于持久化Jenkins容器的数据到宿主机" class="headerlink" title="创建数据卷，用于持久化Jenkins容器的数据到宿主机"></a>创建数据卷，用于持久化Jenkins容器的数据到宿主机</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create jenkins_data</span><br></pre></td></tr></table></figure><h4 id="运行jenkins-d为后台进行-–name为设置名称"><a href="#运行jenkins-d为后台进行-–name为设置名称" class="headerlink" title="运行jenkins -d为后台进行  –name为设置名称"></a>运行jenkins -d为后台进行  –name为设置名称</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name jenkins --restart always -p 5000:5000  -p 8080:8080 -p 50000:50000 -v /home/test/jenkins:/home/test/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/docker%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4.png" alt="image-20200709190541585"></p><h4 id="查看容器进程："><a href="#查看容器进程：" class="headerlink" title="查看容器进程："></a>查看容器进程：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E8%BF%9B%E7%A8%8B.png" alt="image-20200709190638633"  /><h4 id="通过查看容器log进行查找jenkins初始密码：（xxxx-容器-为ID）"><a href="#通过查看容器log进行查找jenkins初始密码：（xxxx-容器-为ID）" class="headerlink" title="通过查看容器log进行查找jenkins初始密码：（xxxx 容器 为ID）"></a>通过查看容器log进行查找jenkins初始密码：（xxxx 容器 为ID）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker logs XXXX</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/docker%E6%9F%A5%E7%9C%8Blog.png" alt="image-20200709190807940"></p><h4 id="通过内网访问服务器jenkins"><a href="#通过内网访问服务器jenkins" class="headerlink" title="通过内网访问服务器jenkins"></a>通过内网访问服务器jenkins</h4><p><a href="http://192.168.216.210:8080/">http://192.168.216.210:8080/</a></p><h4 id="删除对应绑定网桥"><a href="#删除对应绑定网桥" class="headerlink" title="删除对应绑定网桥"></a>删除对应绑定网桥</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker network disconnect --force bridge jenkins</span><br></pre></td></tr></table></figure><h4 id="删除-jenkins容器，xxxx-容器-为ID"><a href="#删除-jenkins容器，xxxx-容器-为ID" class="headerlink" title="删除 jenkins容器，xxxx 容器 为ID"></a>删除 jenkins容器，xxxx 容器 为ID</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm -f XXXX</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器:"></a>停止容器:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop jenkins</span><br></pre></td></tr></table></figure><h4 id="重启容器："><a href="#重启容器：" class="headerlink" title="重启容器："></a>重启容器：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart &lt;container_id&gt;</span><br></pre></td></tr></table></figure><h4 id="从宿主机客户进入容器"><a href="#从宿主机客户进入容器" class="headerlink" title="从宿主机客户进入容器"></a>从宿主机客户进入容器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it -u root jenkins /bin/bash</span><br></pre></td></tr></table></figure><h4 id="进入容器后建立-ssh目录，创建密钥文件私钥id-rsa，公钥id-rsa-pub"><a href="#进入容器后建立-ssh目录，创建密钥文件私钥id-rsa，公钥id-rsa-pub" class="headerlink" title="进入容器后建立.ssh目录，创建密钥文件私钥id_rsa，公钥id_rsa.pub"></a>进入容器后建立.ssh目录，创建密钥文件私钥id_rsa，公钥id_rsa.pub</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.ssh &amp;&amp; cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa# 一直回车即可</span><br></pre></td></tr></table></figure><h4 id="更新容器配置-修改为自动运行或停止自动运行"><a href="#更新容器配置-修改为自动运行或停止自动运行" class="headerlink" title="更新容器配置(修改为自动运行或停止自动运行)"></a>更新容器配置(修改为自动运行或停止自动运行)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart always &lt;容器ID号或者容器别名&gt;</span><br><span class="line">docker update --restart no &lt;容器ID号或者容器别名&gt;</span><br></pre></td></tr></table></figure><h4 id="修改容器别名"><a href="#修改容器别名" class="headerlink" title="修改容器别名"></a>修改容器别名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename &lt;容器原来名&gt; &lt;要改为的名字&gt;</span><br></pre></td></tr></table></figure><h4 id="获取容器元挂载"><a href="#获取容器元挂载" class="headerlink" title="获取容器元挂载"></a>获取容器元挂载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker inspect &lt;容器名&gt; | grep Mounts -A 20</span><br></pre></td></tr></table></figure><h4 id="修改已存在容器映射"><a href="#修改已存在容器映射" class="headerlink" title="修改已存在容器映射"></a>修改已存在容器映射</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo docker inspect &lt;容器名&gt;</span><br><span class="line"># 查看id的hash值</span><br><span class="line">sudo vi /var/lib/docker/containers/&lt;hash_of_the_container&gt;/hostconfig.json</span><br><span class="line">sudo vi /var/lib/docker/containers/&lt;hash_of_the_container&gt;/config.v2.json</span><br><span class="line"># 在 hostconfig.json 里有 &quot;PortBindings&quot;:&#123;&#125; 这个配置项，可以改成 &quot;PortBindings&quot;:&#123;&quot;80/tcp&quot;:[&#123;&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;8080&quot;&#125;]&#125; 这里 80 是容器端口， 8080 是本地端口， 然后在 config.v2.json 里面添加一个配置项 &quot;ExposedPorts&quot;:&#123;&quot;80/tcp&quot;:&#123;&#125;&#125; , 将这个配置项添加到 &quot;Tty&quot;: true, 前面，我不知道添加到别的地方会不会有影响，因为经过对比正常的端口映射配置项是在这个位置，这个就是将容器内部端口暴露出来，如果不加这一句端口映射不会成功的，最后重启 docker的守护进程 service docker restart</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure><h4 id="查看映射端口"><a href="#查看映射端口" class="headerlink" title="查看映射端口"></a>查看映射端口</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port CONTAINER_ID</span><br></pre></td></tr></table></figure><h4 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的IP地址</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; ID/NAMES</span><br></pre></td></tr></table></figure><h4 id="提交镜像（提交时会导致docker进程阻塞）"><a href="#提交镜像（提交时会导致docker进程阻塞）" class="headerlink" title="提交镜像（提交时会导致docker进程阻塞）"></a>提交镜像（提交时会导致docker进程阻塞）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker commit -a &#x27;zhiquan.feng&#x27; -m &#x27;提交融合QA平台和接口自动化的jenkins项目&#x27; 87e71042d3b8 chuman/jenkins:v1</span><br></pre></td></tr></table></figure><h4 id="安装vim"><a href="#安装vim" class="headerlink" title="### 安装vim"></a>### 安装vim</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><h3 id="安装pipenv，因为网络的问题，要使用国内的镜像源来加速-全局安装，要不pipenv"><a href="#安装pipenv，因为网络的问题，要使用国内的镜像源来加速-全局安装，要不pipenv" class="headerlink" title="安装pipenv，因为网络的问题，要使用国内的镜像源来加速(全局安装，要不pipenv)"></a>安装pipenv，因为网络的问题，要使用国内的镜像源来加速(全局安装，要不pipenv)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip3 install -U pipenv -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name pipenv</span><br></pre></td></tr></table></figure><p>创造软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /var/jenkins_home/python3/bin/pipenv /usr/bin/pipenv</span><br></pre></td></tr></table></figure><h4 id="解决pip加载慢"><a href="#解决pip加载慢" class="headerlink" title="解决pip加载慢"></a>解决pip加载慢</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="解决allure安装问题"><a href="#解决allure安装问题" class="headerlink" title="解决allure安装问题"></a>解决allure安装问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">export NODE_HOME=/&lt;nodejs路径&gt;</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin </span><br><span class="line"></span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class="line"></span><br><span class="line">npm install -g allure-commandline --save-dev</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决系统时间不同步的问题"><a href="#解决系统时间不同步的问题" class="headerlink" title="解决系统时间不同步的问题"></a>解决系统时间不同步的问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 进入docker对应容器，删除/etc/localtime</span><br><span class="line">sudo docker exec -it -u root jenkins /bin/bash</span><br><span class="line">rm -rf /etc/localtime</span><br><span class="line">// 回到宿主机，复制本地系统时间文件夹到对应docker容器/etc/localtime中</span><br><span class="line">sudo docker cp /usr/share/zoneinfo/Asia/Shanghai &lt;CONTAINER_ID&gt;:/etc/localtime</span><br></pre></td></tr></table></figure><h3 id="同步docker两个容器的mysql数据"><a href="#同步docker两个容器的mysql数据" class="headerlink" title="同步docker两个容器的mysql数据"></a>同步docker两个容器的mysql数据</h3><h4 id="在宿主机安装crontab"><a href="#在宿主机安装crontab" class="headerlink" title="在宿主机安装crontab"></a>在宿主机安装crontab</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install vixie-cron crontabs</span><br></pre></td></tr></table></figure><h4 id="查看定时任务列表"><a href="#查看定时任务列表" class="headerlink" title="查看定时任务列表"></a>查看定时任务列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h4 id="新建定时任务命令"><a href="#新建定时任务命令" class="headerlink" title="新建定时任务命令"></a>新建定时任务命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><h4 id="宿主机执行定时任务"><a href="#宿主机执行定时任务" class="headerlink" title="宿主机执行定时任务"></a>宿主机执行定时任务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">30 7 * * * bash /home/test/mysql-backup.sh</span><br></pre></td></tr></table></figure><h4 id="定时设置解释"><a href="#定时设置解释" class="headerlink" title="定时设置解释"></a>定时设置解释</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></table></figure><h4 id="启动定时crond服务"><a href="#启动定时crond服务" class="headerlink" title="启动定时crond服务"></a>启动定时crond服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></table></figure><h4 id="查看crond服务状态"><a href="#查看crond服务状态" class="headerlink" title="查看crond服务状态"></a>查看crond服务状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure><h4 id="删除所有定时任务命令"><a href="#删除所有定时任务命令" class="headerlink" title="删除所有定时任务命令"></a>删除所有定时任务命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></table></figure><h4 id="数据库备份与更新脚本-mysql-backup-sh"><a href="#数据库备份与更新脚本-mysql-backup-sh" class="headerlink" title="数据库备份与更新脚本 mysql-backup.sh"></a>数据库备份与更新脚本 mysql-backup.sh</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 设置mysql的登录用户名和密码(根据实际情况填写)</span><br><span class="line">mysql_user=&quot;root&quot;</span><br><span class="line">mysql_password=&quot;1z2x3c4v5b6n7m&quot;</span><br><span class="line">mysql_prod_id=&quot;51ea579affb7&quot;</span><br><span class="line">mysql_dev_id=&quot;34aa0aed191e&quot;</span><br><span class="line"></span><br><span class="line"># 设置需要备份的数据库</span><br><span class="line">db_chuman_qa_platform=&quot;chuman_qa_platform&quot;</span><br><span class="line">db_chuman523=&quot;chumanAndroid523&quot;</span><br><span class="line">db_chuman530=&quot;chumanAndroid530&quot;</span><br><span class="line">db_chuman542=&quot;chumanAndroid542&quot;</span><br><span class="line">db_chuman550=&quot;chumanAndroid550&quot;</span><br><span class="line"></span><br><span class="line"># 备份文件存放宿主机路径(根据实际情况填写)</span><br><span class="line">backup_location=/home/test/mysql-backup</span><br><span class="line"></span><br><span class="line">#如果文件夹不存在则创建</span><br><span class="line">if [ ! -d $backup_location ]; </span><br><span class="line">then </span><br><span class="line"> mkdir -p $backup_location; </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 是否删除过期数据</span><br><span class="line">expire_backup_delete=&quot;ON&quot;</span><br><span class="line">expire_days=30</span><br><span class="line">backup_time=`date +%Y%m%d%H%M`</span><br><span class="line">backup_dir=$backup_location</span><br><span class="line">welcome_msg=&quot;Welcome to use MySQL backup tools!&quot;</span><br><span class="line"></span><br><span class="line"># 备份mysql-prod库中的chuman_qa_platform表数据到宿主机目录下</span><br><span class="line">sudo docker exec $mysql_prod_id mysqldump -u$mysql_user -p$mysql_password $db_chuman_qa_platform device_transfer_record devices &gt; $backup_dir/$database-$backup_time.sql</span><br><span class="line"># 备份mysql-dev库中的chmanAndroid相关库数据到宿主机目录下</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman523 &gt; $backup_dir/$db_chuman523-$backup_time.sql</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman530 &gt; $backup_dir/$db_chuman530-$backup_time.sql</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman542 &gt; $backup_dir/$db_chuman542-$backup_time.sql</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman550 &gt; $backup_dir/$db_chuman550-$backup_time.sql</span><br><span class="line">echo &quot;mysqldump success ok !&quot;</span><br><span class="line"></span><br><span class="line"># 更新导入数据到mysql-dev中</span><br><span class="line">sudo docker exec -i $mysql_dev_id mysql -u$mysql_user -p$mysql_password $db_chuman_qa_platform &lt; $backup_dir/$database-$backup_time.sql;</span><br><span class="line">echo &quot;update dev success ok !&quot;</span><br><span class="line"># 更新导入数据到mysql-prod中</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman523 &lt; $backup_dir/$db_chuman523-$backup_time.sql;</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman530 &lt; $backup_dir/$db_chuman530-$backup_time.sql;</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman542 &lt; $backup_dir/$db_chuman542-$backup_time.sql;</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman550 &lt; $backup_dir/$db_chuman550-$backup_time.sql;</span><br><span class="line">echo &quot;update prod success ok !&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务器安装docker&quot;&gt;&lt;a href=&quot;#服务器安装docker&quot; class=&quot;headerlink&quot; title=&quot;服务器安装docker&quot;&gt;&lt;/a&gt;服务器安装docker&lt;/h2&gt;&lt;h4 id=&quot;连接服务器：&quot;&gt;&lt;a href=&quot;#连接服务器：&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker基础教学</title>
    <link href="https://damonkoy.github.io/2025/01/04/Docker%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/"/>
    <id>https://damonkoy.github.io/2025/01/04/Docker%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/</id>
    <published>2025-01-04T09:22:20.000Z</published>
    <updated>2025-01-06T05:27:58.798Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Docker是一个平台，任何一台装有Docker的机器上你都可以建立、发布、运行你的应用程序。</p><h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><ul><li>最关键的一句话：使用Docker可以省事、省时、省钱。</li><li>用来取代虚拟机；</li><li>Docker可以在几毫秒内为您提供一个沙盒环境。</li><li>Docker有助于将一个复杂系统分解为一系列可组合的部分，这使您能够以一种更加离散的方式对服务进行推理。</li><li>Docker在一台机器上起成百上千个独立的容器，有助于模拟网络，使网络建模成为一件轻而易举的事情。</li><li>由于你可以将所有系统打包进你的Docker容器，所以可以移动工作，甚至脱网离线工作。</li><li>减少调试开销</li><li>Docker强迫你记录软件依赖，方便你其他地方布局或者安装软件。</li><li>实现持续交付</li></ul><h3 id="Docker的核心概念"><a href="#Docker的核心概念" class="headerlink" title="Docker的核心概念"></a>Docker的核心概念</h3><p>容器：一个镜像的运行实例就是一个容器。</p><h3 id="Docker的架构"><a href="#Docker的架构" class="headerlink" title="Docker的架构"></a>Docker的架构</h3><p>熟悉Docker的结构是理解并使用好它的关键。Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。</p><h3 id="试行"><a href="#试行" class="headerlink" title="试行"></a>试行</h3><ul><li>打开命令行终端，通过运行简单的Docker映像<a href="https://hub.docker.com/_/hello-world/">hello-world来</a>测试安装是否正常 ：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run hello-world</span></span><br></pre></td></tr></table></figure><ul><li>启动Dockerized Web服务器。像<code>hello-world</code>上面的图像一样，如果在本地找不到该图像，Docker将其从Docker Hub中拉出。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --detach --publish=80:80 --name=webserver nginx</span></span><br></pre></td></tr></table></figure><ul><li>在Web浏览器中，转到<code>http://localhost/</code>以查看nginx主页。由于我们指定了默认的HTTP端口，因此无需<code>:80</code>在URL末尾附加 。</li></ul><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/image-20200709140904550.png" alt="image-20200709140904550"></p><ul><li>在Web服务器运行时（使用<code>docker container ls</code>或<code>docker ps</code>）查看容器上的详细信息 ：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">c88fe43672b0        docker/getting-started   &quot;/docker-entrypoint.…&quot;   11 minutes ago      Up 10 minutes       0.0.0.0:80-&gt;80/tcp   interesting_cohen</span><br></pre></td></tr></table></figure><ul><li>使用以下命令停止并删除容器和图像。使用“全部”标志（<code>--all</code>或<code>-a</code>）查看停止的容器。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container stop webserver</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> -a</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">rm</span> webserver</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">rm</span> nginx</span></span><br></pre></td></tr></table></figure><h3 id="首选项"><a href="#首选项" class="headerlink" title="首选项"></a>首选项</h3><p>从菜单栏中选择Docker菜单<img src="https://docs.docker.com/docker-for-mac/images/whale-x.png" alt="鲸鱼菜单">&gt; <strong>Preferences</strong>，然后配置下面描述的运行时选项。</p><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/prefs.png" alt="Docker上下文菜单"></p><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/prefs-general.png" alt="优先"></p><p>在<strong>常规</strong>选项卡上，您可以配置何时启动和更新Docker：</p><ul><li><p><strong>登录时启动Docker Desktop</strong>：打开会话时自动启动Docker Desktop。</p></li><li><p><strong>自动检查更新</strong>：默认情况下，Docker Desktop自动检查更新并在更新可用时通知您。您可以随时通过从Docker主菜单中选择<strong>检查更新</strong>来手动检查更新。</p></li><li><p><strong>在Time Machine备份中包括VM</strong>：选择此选项以备份Docker Desktop虚拟机。默认情况下禁用此选项。</p></li><li><p><strong>将Docker登录名安全地存储在macOS钥匙串中</strong>：默认情况下，Docker Desktop将您的Docker登录凭据存储在macOS钥匙串中。</p></li><li><p><strong>发送使用情况统计信息</strong>：Docker Desktop发送诊断，崩溃报告和使用情况数据。此信息可帮助Docker改善应用程序并进行故障排除。清除复选框以选择退出。</p><p>单击“ <strong>切换到Edge版本”</strong>以了解有关Docker Desktop Edge版本的更多信息。</p></li></ul><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>在<strong>资源</strong>选项卡允许您配置CPU，内存，磁盘，代理，网络和其他资源。</p><p>在“高级”选项卡上，您可以限制可用于Docker的资源。</p><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/prefs-advanced.png" alt="高级首选项设置-高级"></p><p>高级设置为：</p><p><strong>CPU</strong>：默认情况下，Docker Desktop设置为使用主机上可用处理器数量的一半。要提高处理能力，请将其设置为更大的数字；减少，减少数字。</p><p><strong>内存</strong>：默认情况下，Docker Desktop设置为使用<code>2</code>GB运行时内存，该内存是从Mac上的总可用内存分配的。要增加RAM，请将其设置为更大的数字。要减少它，请降低数字。</p><p><strong>交换</strong>：根据需要配置交换文件的大小。默认值为1 GB。</p><p><strong>磁盘映像大小</strong>：指定<strong>磁盘映像的大小</strong>。</p><p><strong>磁盘映像位置</strong>：指定Linux卷的容器和映像的存储位置。</p><p>您也可以将磁盘映像移动到其他位置。如果尝试将磁盘映像移动到已有的映像，则会出现提示询问您是否要使用现有映像或替换现有映像。</p><h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>使用文件共享可允许Mac上的本地目录与Linux容器共享。这对于在运行和测试容器中的代码时在主机上的IDE中编辑源代码特别有用。默认情况下<code>/Users</code>，<code>/Volume</code>，<code>/private</code>，<code>/tmp</code>和<code>/var/folders</code>目录共享。如果您的项目不在此目录中，则必须将其添加到列表中。否则，你可能会得到<code>Mounts denied</code>或<code>cannot start service</code>在运行时错误。</p><p>文件共享设置为：</p><ul><li><p><strong>添加目录</strong>：单击<code>+</code>并导航到要添加的目录。</p></li><li><p><strong>Apply＆Restart</strong>通过Docker的bind mount（<code>-v</code>）功能使目录可用于容器。</p><p>可以共享的目录有一些限制：</p><ul><li>该目录不得在Docker内部存在。</li></ul></li></ul><p>有关更多信息，请参见：</p><ul><li><a href="https://docs.docker.com/docker-for-mac/osxfs/">osxfs文件系统共享</a>主题中的 <a href="https://docs.docker.com/docker-for-mac/osxfs/#namespaces">命名空间</a>。</li><li><a href="https://docs.docker.com/docker-for-mac/troubleshoot/#volume-mounting-requires-file-sharing-for-any-project-directories-outside-of-users">卷挂载要求共享文件<code>/Users</code></a>。）<a href="https://docs.docker.com/docker-for-mac/troubleshoot/#volume-mounting-requires-file-sharing-for-any-project-directories-outside-of-users">以外的任何项目目录</a></li></ul><h4 id="代理人"><a href="#代理人" class="headerlink" title="代理人"></a>代理人</h4><p>Docker Desktop从macOS中检测HTTP &#x2F; HTTPS代理设置，并将其自动传播到Docker。例如，如果将代理设置设置为<code>http://proxy.example.com</code>，则Docker在提取容器时会使用此代理。</p><p>但是，您的代理设置不会传播到您启动的容器中。如果要为容器设置代理设置，则需要为其定义环境变量，就像在Linux上一样，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -e HTTP_PROXY=http://proxy.example.com:3128 alpine env</span><br><span class="line"></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">HOSTNAME=b7edf988b2b5</span><br><span class="line">TERM=xterm</span><br><span class="line">HOME=/root</span><br><span class="line">HTTP_PROXY=http://proxy.example.com:3128</span><br></pre></td></tr></table></figure><p>有关设置用于运行容器的环境变量的更多信息，请参见<a href="https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file">设置环境变量</a>。</p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p>您可以配置Docker桌面网络以在虚拟专用网络（VPN）上工作。指定网络地址转换（NAT）前缀和子网掩码以启用Internet连接。</p><h3 id="Docker引擎"><a href="#Docker引擎" class="headerlink" title="Docker引擎"></a>Docker引擎</h3><p>Docker Engine页面允许您配置Docker守护程序以确定容器的运行方式。</p><p>在框中输入JSON配置文件以配置守护程序设置。有关选项的完整列表，请参阅《 Docker Engine <a href="https://docs.docker.com/engine/reference/commandline/dockerd/">dockerd命令行参考》</a>。</p><p>单击“ <strong>应用并重新启动”</strong>以保存您的设置并重新启动Docker Desktop。</p><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>在“命令行”页面上，您可以指定是否启用实验功能。</p><p>实验功能提供了对未来产品功能的早期访问。这些功能仅用于测试和反馈，因为它们可能在版本之间更改而不会发出警告，或者可以从将来的版本中完全删除。实验功能不得在生产环境中使用。Docker不提供对实验功能的支持。</p><blockquote><p>要在Docker CLI中启用实验性功能，请编辑<code>config.json</code> 文件并将其设置<code>experimental</code>为enabled。</p><p>要从Docker Desktop菜单启用实验功能，请单击 <strong>设置</strong>（在macOS上为<strong>Preferences</strong>）&gt; <strong>命令行</strong>，然后打开“ <strong>启用实验功能”</strong>开关。单击“ <strong>应用并重新启动”</strong>。</p></blockquote><p>有关Docker CLI中当前实验功能的列表，请参阅<a href="https://github.com/docker/cli/blob/master/experimental/README.md">Docker CLI实验功能</a>。</p><p>在Docker Desktop Edge和Stable版本上，您都可以打开和关闭实验功能。如果您关闭实验性功能，则Docker桌面将使用当前普遍可用的Docker Engine版本。</p><p>您可以在命令行上查看是否正在运行实验模式。如果 <code>Experimental</code>为<code>true</code>，则Docker将以实验模式运行，如下所示。（如果<code>false</code>，则实验模式关闭。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.8</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.17</span><br><span class="line"> Git commit:        afacb8b</span><br><span class="line"> Built:             Wed Mar 11 01:21:11 2020</span><br><span class="line"> OS/Arch:           darwin/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.8</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.17</span><br><span class="line">  Git commit:       afacb8b</span><br><span class="line">  Built:            Wed Mar 11 01:29:16 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          v1.2.13</span><br><span class="line">  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc10</span><br><span class="line">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure><h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>Docker Desktop包含一个可在Mac上运行的独立Kubernetes服务器，因此您可以测试在Kubernetes上部署Docker工作负载。</p><p>Kubernetes客户端命令<code>kubectl</code>包括在内，并配置为连接到本地Kubernetes服务器。如果您<code>kubectl</code>已经安装并指向其他环境，例如<code>minikube</code>或GKE集群，请确保更改上下文，以便<code>kubectl</code>指向<code>docker-desktop</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl config get-contexts</span><br><span class="line">$ kubectl config use-context docker-desktop</span><br></pre></td></tr></table></figure><p>如果您是<code>kubectl</code>用Homebrew或通过其他方法安装的，并且遇到冲突，请删除<code>/usr/local/bin/kubectl</code>。</p><ul><li><p>要启用Kubernetes支持并安装作为Docker容器运行的Kubernetes独立实例，请选择<strong>Enable Kubernetes</strong>。要将Kubernetes设置为 <a href="https://docs.docker.com/docker-for-mac/kubernetes/#override-the-default-orchestrator">默认协调器</a>，请<a href="https://docs.docker.com/docker-for-mac/kubernetes/#override-the-default-orchestrator">默认</a>选择将<strong>Docker堆栈部署到Kubernetes</strong>。</p><p>单击“ <strong>应用并重新启动”</strong>以保存设置。这将实例化将Kubernetes服务器作为容器运行所需的映像，并将<code>/usr/local/bin/kubectl</code>命令安装在 Mac上。</p><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/kube.png" alt="启用Kubernetes"></p><p>启用并运行Kubernetes后，&#96;&#96;Docker桌面设置’’对话框的右下角将显示一个附加状态栏项目。</p><p>Kubernetes的状态显示在Docker菜单中，上下文指向 <code>docker-desktop</code>。</p><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/kube-context.png" alt="带有Kubernetes的Docker菜单"></p></li><li><p>默认情况下，Kubernetes容器对诸如之类的命令是隐藏的<code>docker service ls</code>，因为不支持手动管理它们。要使其可见，请选择<strong>显示系统容器（高级）</strong>，然后单击<strong>应用并重新启动</strong>。大多数用户不需要此选项。</p></li><li><p>要随时禁用Kubernetes支持，请清除“ <strong>启用Kubernetes”</strong>复选框。Kubernetes容器将停止并删除，并且该 <code>/usr/local/bin/kubectl</code>命令也将删除。</p><p>有关将Kubernetes集成与Docker Desktop结合使用的更多信息，请 <a href="https://docs.docker.com/docker-for-mac/kubernetes/">参阅在Kubernetes上部署</a>。</p></li></ul><h3 id="重设"><a href="#重设" class="headerlink" title="重设"></a>重设</h3><blockquote><p>重置和重启选项</p><p>在Docker Desktop Mac上，**<code>** **疑难解答&#39;&#39;**菜单中提供了**</code>重启Docker桌面’’<strong>，</strong>&#96;&#96;** **重置为出厂默认值’’**以及其他重置选项。</p></blockquote><p>有关重置选项的信息，请参阅<a href="https://docs.docker.com/docker-for-mac/troubleshoot/">日志和故障排除</a>。</p><h2 id="仪表板"><a href="#仪表板" class="headerlink" title="仪表板"></a>仪表板</h2><p>Docker Desktop Dashboard使您可以与容器和应用程序进行交互，并直接从计算机管理应用程序的生命周期。仪表板UI会显示所有正在运行，已停止和已启动的容器及其状态。它提供了一个直观的界面来执行常见的操作，以检查和管理容器以及现有的Docker Compose应用程序。有关更多信息，请参阅<a href="https://docs.docker.com/desktop/dashboard/">Docker Desktop Dashboard</a>。</p><h2 id="添加TLS证书"><a href="#添加TLS证书" class="headerlink" title="添加TLS证书"></a>添加TLS证书</h2><p>您可以将可信证书颁发机构（CA）（用于验证注册表服务器证书）和客户端证书（用于对注册表进行身份验证）添加到Docker守护程序。</p><h3 id="添加自定义CA证书（服务器端）"><a href="#添加自定义CA证书（服务器端）" class="headerlink" title="添加自定义CA证书（服务器端）"></a>添加自定义CA证书（服务器端）</h3><p>支持所有受信任的CA（根或中间CA）。Docker Desktop根据Mac密钥链创建所有用户信任的CA的证书捆绑包，并将其附加到Moby信任的证书。因此，如果主机上的用户信任企业SSL证书，则Docker Desktop会信任它。</p><p>要手动添加自定义的自签名证书，请先将证书添加到macOS钥匙串中，然后由Docker Desktop获取。这是一个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ca.crt</span><br></pre></td></tr></table></figure><p>或者，如果您只想将证书添加到自己的本地钥匙串中（而不是对所有用户），请运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain ca.crt</span><br></pre></td></tr></table></figure><p>另请参阅<a href="https://docs.docker.com/docker-for-mac/#directory-structures-for-certificates">证书的目录结构</a>。</p><blockquote><p><strong>注意</strong>：您需要在对钥匙串或<code>~/.docker/certs.d</code>目录进行任何更改后重新启动Docker Desktop ，以使更改生效。</p></blockquote><p>有关如何执行此操作的完整说明，请参阅博客文章“ <a href="http://container-solutions.com/adding-self-signed-registry-certs-docker-mac/">将自签名注册表证书添加到Docker和Mac的Docker桌面”</a>。</p><h3 id="添加客户端证书"><a href="#添加客户端证书" class="headerlink" title="添加客户端证书"></a>添加客户端证书</h3><p>您可以将客户证书放在 <code>~/.docker/certs.d/&lt;MyRegistry&gt;:&lt;Port&gt;/client.cert</code>和中 <code>~/.docker/certs.d/&lt;MyRegistry&gt;:&lt;Port&gt;/client.key</code>。</p><p>Docker Desktop应用程序启动时，它将<code>~/.docker/certs.d</code> Mac上的文件夹复制到<code>/etc/docker/certs.d</code>Moby（Docker Desktop <code>xhyve</code>虚拟机）上的目录。</p><blockquote><ul><li>您需要在对钥匙串或<code>~/.docker/certs.d</code>目录进行任何更改后重新启动Docker Desktop ，以使更改生效。</li><li>该注册表不能被列为<em>不安全的注册表</em>（请参阅<a href="https://docs.docker.com/docker-for-mac/#docker-engine">Docker</a> Engine。Docker Desktop会忽略<em>不安全的注册表</em>下列出的证书，并且不发送客户端证书。<code>docker run</code>此类尝试从注册表中提取的命令会在命令行上生成错误消息，以及在注册表上。</li></ul></blockquote><h3 id="证书的目录结构"><a href="#证书的目录结构" class="headerlink" title="证书的目录结构"></a>证书的目录结构</h3><p>如果具有此目录结构，则无需手动将CA证书添加到Mac OS系统登录名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/&lt;user&gt;/.docker/certs.d/</span><br><span class="line">└── &lt;MyRegistry&gt;:&lt;Port&gt;</span><br><span class="line">   ├── ca.crt</span><br><span class="line">   ├── client.cert</span><br><span class="line">   └── client.key</span><br></pre></td></tr></table></figure><p>以下内容进一步说明和解释了使用自定义证书的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/docker/certs.d/        &lt;-- Certificate directory</span><br><span class="line">└── localhost:5000          &lt;-- Hostname:port</span><br><span class="line">   ├── client.cert          &lt;-- Client certificate</span><br><span class="line">   ├── client.key           &lt;-- Client key</span><br><span class="line">   └── ca.crt               &lt;-- Certificate authority that signed</span><br><span class="line">                                the registry certificate</span><br></pre></td></tr></table></figure><p>只要CA证书也在钥匙串中，您也可以具有此目录结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/&lt;user&gt;/.docker/certs.d/</span><br><span class="line">└── &lt;MyRegistry&gt;:&lt;Port&gt;</span><br><span class="line">    ├── client.cert</span><br><span class="line">    └── client.key</span><br></pre></td></tr></table></figure><p>要了解有关如何为注册表安装CA根证书以及如何设置客户端TLS证书进行验证的更多信息，请参阅 Docker Engine主题中的<a href="https://docs.docker.com/engine/security/certificates/">使用证书验证存储库客户端</a>。</p><h2 id="安装外壳完成"><a href="#安装外壳完成" class="headerlink" title="安装外壳完成"></a>安装外壳完成</h2><p>Docker Desktop随附脚本，用于启用<code>docker</code>和<code>docker-compose</code>命令的完成。补全脚本可以<code>Docker.app</code>在<code>Contents/Resources/etc/</code>目录中的内找到，并且可以安装在Bash和Zsh中。</p><h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>Bash <a href="https://www.debian-administration.org/article/316/An_introduction_to_bash_completion_part_1">内置了对完成的支持</a>要激活Docker命令的完成，需要将这些文件复制或符号链接到您的<code>bash_completion.d/</code>目录。例如，如果您通过<a href="http://brew.sh/">Homebrew</a>安装了bash ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">etc=/Applications/Docker.app/Contents/Resources/etc</span><br><span class="line">ln -s $etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker</span><br><span class="line">ln -s $etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>将以下内容添加到您的<code>~/.bash_profile</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ -f /usr/local/etc/bash_completion ] &amp;&amp; . /usr/local/etc/bash_completion</span><br></pre></td></tr></table></figure><p>要么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ -f $(brew --prefix)/etc/bash_completion ]; then</span><br><span class="line">. $(brew --prefix)/etc/bash_completion</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h3><p>在Zsh中，<a href="http://zsh.sourceforge.net/Doc/Release/Completion-System.html">完成系统</a>负责处理事务。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到您的Zsh <code>site-functions/</code> 目录。例如，如果您通过<a href="http://brew.sh/">Homebrew</a>安装了Zsh ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">etc=/Applications/Docker.app/Contents/Resources/etc</span><br><span class="line">ln -s $etc/docker.zsh-completion /usr/local/share/zsh/site-functions/_docker</span><br><span class="line">ln -s $etc/docker-compose.zsh-completion /usr/local/share/zsh/site-functions/_docker-compose</span><br></pre></td></tr></table></figure><h3 id="Fish-Shell"><a href="#Fish-Shell" class="headerlink" title="Fish-Shell"></a>Fish-Shell</h3><h3 id="Fish-Shell还支持制表符完成系统。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell-completions-目录。"><a href="#Fish-Shell还支持制表符完成系统。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell-completions-目录。" class="headerlink" title="Fish-Shell还支持制表符完成系统。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell completions/ 目录。"></a>Fish-Shell还支持制表符<a href="https://fishshell.com/docs/current/#tab-completion">完成系统</a>。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell <code>completions/</code> 目录。</h3><p>创建<code>completions</code>目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.config/fish/completions</span><br></pre></td></tr></table></figure><p>现在，从docker添加完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -shi /Applications/Docker.app/Contents/Resources/etc/docker.fish-completion ~/.config/fish/completions/docker.fish</span><br><span class="line">ln -shi /Applications/Docker.app/Contents/Resources/etc/docker-compose.fish-completion ~/.config/fish/completions/docker-compose.fish</span><br></pre></td></tr></table></figure><h2 id="提供反馈并获得帮助"><a href="#提供反馈并获得帮助" class="headerlink" title="提供反馈并获得帮助"></a>提供反馈并获得帮助</h2><p>要获得社区的帮助，请查看当前用户主题，加入或开始讨论，登录到我们的<a href="https://forums.docker.com/c/docker-for-mac">Docker Desktop for Mac论坛</a>。</p><p>要报告错误或问题，请<a href="https://github.com/docker/for-mac/issues">在GitHub上</a>登录Docker Desktop <a href="https://github.com/docker/for-mac/issues">for Mac问题</a>，您可以在其中查看社区报告的问题并提出新问题。有关更多详细信息，请参见 <a href="https://docs.docker.com/docker-for-mac/troubleshoot/">日志和故障排除</a>。</p><p>有关提供有关文档反馈或自己进行更新的信息，请参阅“ <a href="https://docs.docker.com/opensource/">贡献文档”</a>。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>从Docker桌面菜单中选择<strong>登录&#x2F;创建Docker ID</strong>以访问您的<a href="https://hub.docker.com/">Docker Hub</a>帐户。登录后，您可以直接从Docker Desktop菜单访问Docker Hub存储库和组织。</p><p>有关更多信息，请参考以下<a href="https://docs.docker.com/docker-hub/">Docker Hub主题</a>：</p><ul><li><a href="https://docs.docker.com/docker-hub/orgs/">Docker Hub中的组织和团队</a></li><li><a href="https://docs.docker.com/docker-hub/builds/">建物</a></li></ul><h3 id="两因素认证"><a href="#两因素认证" class="headerlink" title="两因素认证"></a>两因素认证</h3><p>Docker Desktop使您可以使用两因素身份验证登录Docker Hub。当访问您的Docker Hub帐户时，两要素身份验证提供了额外的安全层。</p><p>您必须先在Docker Hub中启用双重身份验证，然后才能通过Docker Desktop登录到Docker Hub帐户。有关说明，请参阅<a href="https://docs.docker.com/docker-hub/2fa/">为Docker Hub启用两因素身份验证</a>。</p><p>启用两因素身份验证后：</p><ol><li>转到Docker Desktop菜单，然后选择<strong>登录&#x2F;创建Docker ID</strong>。</li><li>输入您的Docker ID和密码，然后单击<strong>登录</strong>。</li><li>成功登录后，Docker Desktop会提示您输入身份验证代码。输入手机的六位数代码，然后点击<strong>验证</strong>。</li></ol><p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/desktop-mac-2fa.png" alt="Docker桌面2FA"></p><p>成功通过身份验证后，您可以直接从Docker Desktop菜单访问您的组织和存储库。</p><h3 id="将docker修改镜像源"><a href="#将docker修改镜像源" class="headerlink" title="将docker修改镜像源"></a>将docker修改镜像源</h3><blockquote><p>在<code>/etc/docker/daemon.json</code>文件中添加下面参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;registry-mirrors&quot; : [&quot;https://almtd3fa.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有该文件则自行创建</p></blockquote><h3 id="最后重启docker服务"><a href="#最后重启docker服务" class="headerlink" title="最后重启docker服务"></a>最后重启docker服务</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Docker是一个平台，任何一台装有Docker的机器上你都可以建立、发布、运行你的应用程序。&lt;/p&gt;
&lt;h3 id=&quot;为什么要使用？&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【高效防控】从零构建高效稳定的监控体系</title>
    <link href="https://damonkoy.github.io/2025/01/04/%E3%80%90%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7%E3%80%91%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E7%A8%B3%E5%AE%9A%E7%9A%84%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    <id>https://damonkoy.github.io/2025/01/04/%E3%80%90%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7%E3%80%91%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E7%A8%B3%E5%AE%9A%E7%9A%84%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/</id>
    <published>2025-01-04T08:58:38.000Z</published>
    <updated>2025-01-07T06:10:46.016Z</updated>
    
    
    
    
    
    <category term="监控体系" scheme="https://damonkoy.github.io/tags/%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins项目配置</title>
    <link href="https://damonkoy.github.io/2020/01/06/Jenkins%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    <id>https://damonkoy.github.io/2020/01/06/Jenkins%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-06T07:09:28.000Z</published>
    <updated>2025-01-06T07:11:22.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Jenkins-项目chuman-qa-platform-server"><a href="#Jenkins-项目chuman-qa-platform-server" class="headerlink" title="Jenkins 项目chuman-qa-platform-server "></a>Jenkins 项目<a href="http://192.168.216.210:8080/job/chuman-qa-platform-server/">chuman-qa-platform-server </a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行项目脚本</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ps -ef | grep gunicorn | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>| xargs <span class="built_in">sudo</span> <span class="built_in">kill</span> -9</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防止jenkins部署完毕自动删除进程</span></span><br><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line"></span><br><span class="line">pid=`ps -ef | grep gunicorn | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line">echo $pid</span><br><span class="line">if [ -n &quot;$pid&quot; ]</span><br><span class="line">then</span><br><span class="line">  kill -9 $pid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">pip3 install -r requirements.txt </span><br><span class="line"></span><br><span class="line">source set_flask_env.sh prod </span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/var/jenkins_home/python3/bin/</span><br><span class="line"></span><br><span class="line">gunicorn manage:app -c gunicorn.conf.py</span><br><span class="line"></span><br><span class="line">sleep 3</span><br><span class="line"></span><br><span class="line">pid_result=`ps -ef | grep gunicorn | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">echo $pid_result</span><br><span class="line"></span><br><span class="line">if [ -n &quot;$pid_result&quot; ]</span><br><span class="line">then</span><br><span class="line">exit 0</span><br><span class="line">else</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jenkins项目-chuman-api-test-new"><a href="#jenkins项目-chuman-api-test-new" class="headerlink" title="jenkins项目 chuman-api-test-new"></a>jenkins项目 chuman-api-test-new</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取上游项目的执行环境，并设置接口测试对应的执行环境</span></span><br><span class="line">echo &quot;hashversion=$&#123;hashversion&#125;&quot;</span><br><span class="line">echo &quot;envir=$&#123;envir&#125;&quot;</span><br><span class="line">echo &quot;debug_info=$&#123;debug_info&#125;&quot;</span><br><span class="line">echo &quot;describe=$&#123;describe&#125;&quot;</span><br><span class="line">envir_tmp=$&#123;envir#*/&#125;</span><br><span class="line">envir=$&#123;envir_tmp%.*&#125;</span><br><span class="line"></span><br><span class="line">if [ $envir == &#x27;demo-u-api&#x27; ];then</span><br><span class="line">  test_env=&#x27;demo&#x27;</span><br><span class="line">    exec_file=&#x27;testsuites/P0_demo_testsuite.yml&#x27;</span><br><span class="line">    config_file=&#x27;env/demo.env&#x27;</span><br><span class="line">elif [ $envir == &#x27;api2-u-api&#x27; ];then</span><br><span class="line">    test_env=&#x27;api2&#x27;</span><br><span class="line">    exec_file=&#x27;testsuites/P0_api2_testsuite.yml&#x27;</span><br><span class="line">    config_file=&#x27;env/api2.env&#x27;</span><br><span class="line">elif [ $envir == &#x27;demo-cf-api&#x27; ];then</span><br><span class="line">    test_env=&#x27;demo-cf&#x27;</span><br><span class="line">    exec_file=&#x27;testsuites/P0_demo_cf_testsuite.yml&#x27;</span><br><span class="line">    config_file=&#x27;env/demo_cf.env&#x27;</span><br><span class="line">elif [ $envir == &#x27;api2-cf-api&#x27; ];then</span><br><span class="line">    test_env=&#x27;api2-cf&#x27;</span><br><span class="line">    exec_file=&#x27;testsuites/P0_api2_cf_testsuite.yml&#x27;</span><br><span class="line">    config_file=&#x27;env/api2_cf.env&#x27;</span><br><span class="line">else</span><br><span class="line">    test_env=&#x27;none&#x27;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断是否需要执行测试</span></span><br><span class="line">if [ $test_env == &#x27;none&#x27; ];then</span><br><span class="line">  echo &quot;构建环境是$envir，不需要执行接口测试&quot;</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">旧项目变量</span></span><br><span class="line">  project_name=chuman-api-test</span><br><span class="line">  report_html=reports/$BUILD_NUMBER.html</span><br><span class="line">  exec_file_tmp=$&#123;exec_file#*/&#125;</span><br><span class="line">  report_json=&quot;logs/testsuites/$&#123;exec_file_tmp%.*&#125;.summary.json&quot;</span><br><span class="line">  log_url=$BUILD_URL/console</span><br><span class="line">  show_report_url=&quot;http://qa-report-dev.chumanapp.com/&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">新项目变量</span></span><br><span class="line">  new_project_name=chuman-api-test-new</span><br><span class="line">  new_report_html=allure-report/$BUILD_NUMBER/index.html</span><br><span class="line">  new_report_dir=allure-report/$BUILD_NUMBER  </span><br><span class="line">  file_name=&#x27;testcases&#x27;</span><br><span class="line">  prometheusData=&quot;allure-report/$BUILD_NUMBER/export/prometheusData.txt&quot;</span><br><span class="line">  behaviors_json=&quot;allure-report/$BUILD_NUMBER/data/test-cases/behaviors.json&quot;</span><br><span class="line">  status_json=&quot;allure-report/$BUILD_NUMBER/widgets/status-chart.json&quot;</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">公共变量</span></span><br><span class="line">  test_time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">  ding_url=&#x27;https://oapi.dingtalk.com/robot/send?access_token=83f04c75d4ec2a260b8bf7e959c98374cfaebd34b4973dac03a838d20c217287&#x27;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行旧项目脚本</span></span><br><span class="line">  cd chuman-api-test</span><br><span class="line">  pipenv install --skip-lock</span><br><span class="line">  pipenv run hrun $exec_file --dot-env-path $config_file --log-level debug --save-tests --report-file $report_html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行旧项目报告生产数据</span></span><br><span class="line">  if [ -f $report_html ];then</span><br><span class="line">    show_report_dir=&quot;/data/qa-report/&quot;</span><br><span class="line">    show_report_name=&quot;$&#123;JOB_NAME&#125;报告_$BUILD_NUMBER.html&quot;</span><br><span class="line"></span><br><span class="line">    # 把生成的报告移动到展示的目录下</span><br><span class="line">    cp $report_html $&#123;show_report_dir&#125;$&#123;show_report_name&#125;</span><br><span class="line"></span><br><span class="line">    report_url=$show_report_url$show_report_name</span><br><span class="line">        echo $report_url</span><br><span class="line">    case_total=$(cat $report_json | jq &#x27;.stat.testcases.total&#x27;)</span><br><span class="line">    case_success=$(cat $report_json | jq &#x27;.stat.testcases.success&#x27;)</span><br><span class="line">    case_fail=$(cat $report_json | jq &#x27;.stat.testcases.fail&#x27;)</span><br><span class="line">    fail_module=&#x27;&#x27;</span><br><span class="line">      if [ $case_fail != &#x27;0&#x27; ];then</span><br><span class="line">        for index in `seq 0 $case_total`</span><br><span class="line">        do</span><br><span class="line">          success=$(cat $report_json | jq -r &quot;.details[$index].success&quot;)</span><br><span class="line">          if [ $success == &#x27;false&#x27; ];then</span><br><span class="line">            name=$(cat $report_json | jq -r &quot;.details[$index].name&quot;)</span><br><span class="line">            fail_module=$fail_module$&#x27;\n&#x27;$name</span><br><span class="line">          fi</span><br><span class="line">        done</span><br><span class="line">      else</span><br><span class="line">        fail_module=&#x27;无&#x27;</span><br><span class="line">    fi</span><br><span class="line">  fi  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行新项目脚本</span></span><br><span class="line">  cd ..</span><br><span class="line">  cd chuman-api-test-new</span><br><span class="line">  pipenv install --skip-lock</span><br><span class="line">  pipenv run pytest $file_name --env=$test_env </span><br><span class="line">  allure generate reports -o allure-report/$BUILD_NUMBER --clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行新项目报告生产数据</span></span><br><span class="line">  if [ -f $new_report_html ];then</span><br><span class="line">    new_show_report_dir=&quot;/data/qa-report/&quot;</span><br><span class="line">    new_show_report_name=&quot;qa-p1p2报告_allure_report_$BUILD_NUMBER&quot;</span><br><span class="line"></span><br><span class="line">    # 把生成的报告移动到展示的目录下</span><br><span class="line">    cp -r $new_report_dir $&#123;new_show_report_dir&#125;$&#123;new_show_report_name&#125;</span><br><span class="line">    new_report_url=$show_report_url$new_show_report_name</span><br><span class="line">    echo $new_report_url</span><br><span class="line"></span><br><span class="line">    run_num=`grep &quot;launch_retries_run&quot; $prometheusData|awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">    passed_num=`grep &quot;launch_status_passed&quot; $prometheusData|awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">    failed_num=`grep &quot;launch_status_failed&quot; $prometheusData|awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">    broken_num=`grep &quot;launch_status_broken&quot; $prometheusData|awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line">    skipped_num=`grep &quot;launch_status_skipped&quot; $prometheusData|awk &#x27;&#123;print $NF&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">    broken_module=&#x27;&#x27;</span><br><span class="line">      if [ $broken_num != &#x27;0&#x27; ] || [ $failed_num != &#x27;0&#x27; ];then</span><br><span class="line">        for index in `seq 0 $run_num`</span><br><span class="line">        do</span><br><span class="line">          result=$(cat $status_json | jq &quot;.[$index].status&quot;)</span><br><span class="line">          echo $result</span><br><span class="line">          if [[ $result == &#x27;&quot;broken&quot;&#x27; ]] || [[ $result == &#x27;&quot;failed&quot;&#x27; ]];then</span><br><span class="line">            broken_name=$(cat $status_json | jq &quot;.[$index].name&quot;)</span><br><span class="line">            tmp=&quot;$&#123;broken_name%\&quot;&#125;&quot;</span><br><span class="line">            broken_name=&quot;$&#123;tmp#\&quot;&#125;&quot;</span><br><span class="line">            echo $broken_name</span><br><span class="line">            broken_module=$broken_module$&#x27;\n&#x27;$broken_name</span><br><span class="line">            echo $broken_module</span><br><span class="line">          fi</span><br><span class="line">        done</span><br><span class="line">      else</span><br><span class="line">        broken_module=&#x27;无&#x27;</span><br><span class="line">    fi</span><br><span class="line">    # 统计所有项目执行数据</span><br><span class="line">    run_sum=$(($case_total+$run_num-$skipped_num))</span><br><span class="line">    success_sum=$(($case_success+$passed_num))</span><br><span class="line">    failed_sum=$(($failed_num+$broken_num+$case_fail))</span><br><span class="line">    if [[ $fail_module == &#x27;无&#x27; ]] &amp;&amp; [[ $broken_module == &#x27;无&#x27; ]];then</span><br><span class="line">    failed_module=&#x27;无&#x27;</span><br><span class="line">    elif [ $fail_module == &#x27;无&#x27; ];then</span><br><span class="line">    failed_module=$broken_module</span><br><span class="line">    elif [ $broken_module == &#x27;无&#x27; ];then</span><br><span class="line">    failed_module=$fail_module</span><br><span class="line">    else </span><br><span class="line">    failed_module=$fail_module$&#x27;\n&#x27;$broken_module</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">ding_message=&quot;后端$&#123;test_env&#125;环境代码发布\n发布用户：$&#123;BUILD_USER&#125;\n代码hash：$&#123;hashversion&#125;\ndebug_info：$&#123;debug_info&#125;\n发布描述：$&#123;describe&#125;\n\n触漫接口自动化测试执行完毕，以下为执行结果：\n执行环境：$&#123;test_env&#125;\n执行时间：$&#123;test_time&#125;\n测试场景总数：$&#123;run_sum&#125;\n成功场景数：$&#123;success_sum&#125;\n失败场景数：$&#123;failed_sum&#125;\n\n失败涉及模块：$&#123;failed_module&#125;\n触漫P0接口测试报告：$report_url\n触漫P1~P2接口报告：$new_report_url&quot;</span><br><span class="line">curl $ding_url \</span><br><span class="line">   -H &#x27;Content-Type: application/json&#x27; \</span><br><span class="line">   -d  &#x27;&#123;&quot;msgtype&quot;: &quot;text&quot;,</span><br><span class="line">       &quot;text&quot;: &#123;</span><br><span class="line">           &quot;content&quot;: &quot;&#x27;&quot;$&#123;ding_message&#125;&quot;&#x27;&quot;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="jenkins-项目-chuman-ui-test"><a href="#jenkins-项目-chuman-ui-test" class="headerlink" title="jenkins 项目 chuman-ui-test"></a>jenkins 项目 chuman-ui-test</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ $&#123;app_url&#125; != &#x27;&#x27; ];then</span><br><span class="line">    echo $&#123;app_url&#125;</span><br><span class="line">cd $&#123;WORKSPACE&#125;/app/</span><br><span class="line">rm -rf *.apk</span><br><span class="line">    curl -O $&#123;app_url&#125;</span><br><span class="line">    if [ -e *.apk ];then</span><br><span class="line">    adb install -r *.apk</span><br><span class="line">    else</span><br><span class="line">    echo &#x27;安装包下载失败&#x27;</span><br><span class="line">    cd $&#123;WORKSPACE&#125;</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">echo &#x27;旧包执行&#x27;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">rm -rf $&#123;WORKSPACE&#125;/allure_results/</span><br><span class="line">rm -rf $&#123;WORKSPACE&#125;/allure_report/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">lsof -i:22471|sed -n &#x27;2p&#x27;|awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9 || True</span><br><span class="line">ps -ef |grep Nemu |grep -v grep |awk &#x27;&#123;print $2&#125;&#x27; |xargs kill -9 || True</span><br><span class="line">open /Applications/NemuPlayer.app</span><br><span class="line">sleep 15s</span><br><span class="line">res_adb=`adb devices`</span><br><span class="line">on=&#x27;device&#x27;</span><br><span class="line">echo $&#123;res_adb&#125;</span><br><span class="line">if [[ $&#123;res_adb&#125; == *$&#123;on&#125; ]];then</span><br><span class="line">    echo &#x27;------ keep running ------&#x27;</span><br><span class="line">else</span><br><span class="line">echo &#x27;------ restart adb server ------&#x27;</span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br><span class="line">sleep 5s</span><br><span class="line">    res_adb=`adb devices`</span><br><span class="line">    echo $&#123;res_adb&#125;</span><br><span class="line">    if [[ $&#123;res_adb&#125; == *$&#123;on&#125; ]];then</span><br><span class="line">        echo &#x27;------ keep running ------&#x27;</span><br><span class="line">    else</span><br><span class="line">    echo &#x27;------ server not start ------&#x27;</span><br><span class="line">fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep appium |grep -v grep |awk &#x27;&#123;print $2&#125;&#x27; |xargs kill -9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">bash adb_del_picture.sh</span><br><span class="line">rm -rf appium.log</span><br><span class="line">touch appium.log</span><br><span class="line">appium_log_content=`cat appium.log`</span><br><span class="line">test=&quot;started&quot;</span><br><span class="line">result=&quot;&quot;</span><br><span class="line">while [ &quot;$result&quot; == &quot;&quot; ]; do</span><br><span class="line">    echo &quot;appium still not started!Try again!&quot;</span><br><span class="line">    bash startAppium.sh</span><br><span class="line">    sleep 2</span><br><span class="line">    appium_log_content=`cat appium.log`</span><br><span class="line">    result=$(echo $&#123;appium_log_content&#125; | grep &quot;$&#123;test&#125;&quot;)</span><br><span class="line">done </span><br><span class="line">ps -ef |grep appium</span><br><span class="line">cat appium.log</span><br><span class="line">sleep 2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -v -s -m=$&#123;mark&#125; ./testcases/$&#123;module&#125;  --alluredir $&#123;WORKSPACE&#125;/allure_results</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/jenkins%E6%9E%84%E5%BB%BA1.png" alt="image-20201014154819459"></p><p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/jenkins%E6%9E%84%E5%BB%BA2.png" alt="image-20201014154846581"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Jenkins-项目chuman-qa-platform-server&quot;&gt;&lt;a href=&quot;#Jenkins-项目chuman-qa-platform-server&quot; class=&quot;headerlink&quot; title=&quot;Jenkins 项目chuman-qa-pl</summary>
      
    
    
    
    
  </entry>
  
</feed>
