<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【高效防控】从零构建高效稳定的监控体系</title>
    <url>/2025/01/04/%E3%80%90%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7%E3%80%91%E4%BB%8E%E9%9B%B6%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E7%A8%B3%E5%AE%9A%E7%9A%84%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;随着业务的不断拓展，开平对接的外部渠道越来越多，服务间的交互逻辑也变得更加复杂。但目前开平还没有一套有效的线上监控机制。为了确保业务能够顺利开展，我们需要构建一套监控体系，该体系能够快速定位问题根源，并在故障刚出现时就迅速做出响应，从而将线上问题的影响降至最低。</p>
<h2 id="监控架构概述"><a href="#监控架构概述" class="headerlink" title="监控架构概述"></a>监控架构概述</h2><p>&nbsp; &nbsp;为了满足从复杂业务环境中获取监控信息的有效性，我们采用了多维度监控矩阵全面覆盖，最终达成业务精准监控。这一设计矩阵是我们监控架构的核心，它确保了我们能够全面地处理和分析不同业务模块产生的大量监控数据。<br>监控架构如下图：<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E7%9B%91%E6%8E%A7%E6%9E%B6%E6%9E%84%E5%9B%BE.png"><br>本方案精心设计了多维度监控架构，旨在高效、全面地处理与分析监控数据。该监控框架主要由以下关键模块构成：监控指标、监控核心、监控目的、告警通知以及监控流程模块。<br><strong>监控指标模块</strong>：监控类型模块是整个架构的基础，负责列举和管理不同类型的监控内容，包括硬件、业务、接口等多方面的监控类型及其具体对象。<br><strong>监控核心与目标</strong>：监控核心模块的核心职责是通过监控目标、指标和核心要素的有机结合，形成监控的枢纽，确保对业务的全面感知。<br><strong>告警通知模块</strong>：告警通知模块对及时处理业务异常至关重要。以飞书和电话为载体，采用阶梯式处理与值班制度，可保障业务在异常时能迅速、准确且有序处理，确保业务稳定运行。<br><strong>监控流程模块</strong>：存储监控数据采集、存储、分析、展示、告警、跟进和治理等操作过程信息，确保整个监控流程的有序进行。</p>
<h3 id="业务关键指标监控"><a href="#业务关键指标监控" class="headerlink" title="业务关键指标监控"></a>业务关键指标监控</h3><p>&nbsp; &nbsp; 主要涉及以下几个方面：渠道冒泡成功率、抢单成功率、成单量、成单率、GMV（商品交易总额）以及毛利等，这些指标对于评估业务运营状况具有重要意义。
&nbsp; &nbsp; </p>
<h3 id="服务接口关键指标监控"><a href="#服务接口关键指标监控" class="headerlink" title="服务接口关键指标监控"></a>服务接口关键指标监控</h3><p>&nbsp; &nbsp; 针对开平主 询价 -&gt; 创单， 抢单 -&gt; 确认派单， 事件状态同步 -&gt; 支付状态同步 这三个场景进行重点关注，保障系统在各个业务环节的平稳运行，从而筑牢系统稳定的首道防线。</p>
<h3 id="上下游服务一体化监控"><a href="#上下游服务一体化监控" class="headerlink" title="上下游服务一体化监控"></a>上下游服务一体化监控</h3><p>&nbsp; &nbsp; 开平的上下游涵盖计费、订单、派单和地图等关键业务环节，针对其间接口精细梳理，构建一体化监控体系。实时追踪接口响应时间、吞吐量、错误率等指标。一旦出现异常，能同时触发告警，快速定位问题根源，保障业务流程顺畅，提升系统稳定性，降低协同故障风险。</p>
<h2 id="基于Prometheus的监控1-0建设"><a href="#基于Prometheus的监控1-0建设" class="headerlink" title="基于Prometheus的监控1.0建设"></a>基于 Prometheus 的监控 1.0 建设</h2><h3 id="监控面板配置"><a href="#监控面板配置" class="headerlink" title="监控面板配置"></a>监控面板配置</h3><p><strong>1. 关键指标</strong><br>&nbsp; &nbsp;锁定 “调用量”、“异常率” 和 “TP99” 三大关键指标。三者协同，精准判接口状态，筑牢系统平稳首道防线。PromQL 是 Prometheus 内置的数据查询语言，常用的语句如下：<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E6%8C%87%E6%A0%87%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5.png"><br><strong>2. 数据采集调试</strong><br>&nbsp; &nbsp;对于监控指标，需要收集过去 30 天的数据，去除异常值和错误数据进行评估，根据个人经验进行评估锚定初定的告警阈值和持续时间，试运行期间观察系统的报警情况和实际状态。根据试运行的结果，对阈值进行调整和优化。如果发现报警过于频繁或存在漏报的情况，则需要重新分析数据，调整阈值的设定。<br>&nbsp; &nbsp;&nbsp;<img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E7%9B%91%E6%8E%A7%E9%85%8D%E7%BD%AE.png"><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E5%91%8A%E8%AD%A6%E9%85%8D%E7%BD%AE.png"><br><strong>3. 告警通知</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当 Prometheus Server 中的监控规则检测到告警情况时，会将告警信息（push alerts）推送至 AlertManager 中的 Receiver 模块。AlertManager 内部的 Router 模块负责对接收的告警进行处理和路由，随后通过 notify 操作将告警信息发送至飞书等外部通知渠道，实现告警的及时传达。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E5%91%8A%E8%AD%A6%E9%80%9A%E7%9F%A5%E9%80%BB%E8%BE%91.png">以下展示了一个告警通知在飞书中呈现的样式：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E5%91%8A%E8%AD%A6%E9%A3%9E%E4%B9%A6%E6%A0%B7%E5%BC%8F.png"></p>
<h3 id="困境突围"><a href="#困境突围" class="headerlink" title="困境突围"></a>困境突围</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在监控体系建设中会遇到诸多问题，在此，我将选取以下两个较为典型的案例进行剖析。</p>
<h4 id="告警降噪"><a href="#告警降噪" class="headerlink" title="告警降噪"></a>告警降噪</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;监控发现，告警有效率低问题突出。因兼顾夜间低流量，阈值设得过低，正常时段难察异常。如某接口，为适配夜间，告警阈值设为 280 以下、持续 3 - 5 分钟。一旦高峰遇异常，调用量从 9000 + 骤降至 280 才告警，这极易引发 P0 事故。<br>随之而来的是重重隐患：</p>
<ul>
<li><strong>告警滞后</strong>：阈值低，告警延迟，错过处理良机，致问题恶化。</li>
<li><strong>告警沉默</strong>：阈值钝化，告警不触发，隐患悄然滋生。</li>
<li><strong>损失惨重</strong>：问题持续，客户体验受损、用户流失、经济受损。   </li>
<li><strong>修复成本剧增</strong>：问题隐匿积累，察觉时修复难度极大。<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E8%B0%83%E7%94%A8%E9%87%8F%E6%97%A5%E7%A8%8B%E5%B7%AE%E8%B7%9D.png"><br>  <strong>解决方案</strong>：经系列研究与试验，深入剖析 3 种方案后，发现【高峰期监控】方案最宜初期快速部署监控，收益最大（详见表格）。于是决定将监控策略重心转向关键时段。<img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E7%9B%91%E6%8E%A7%E6%96%B9%E6%A1%88%E5%AF%B9%E6%AF%94.png">PromQL 使用 and on () (hour (timestamp (time ())) &gt;= 8 and hour (timestamp (time ())) &lt; 23) offset -8h &nbsp;语句进行采集特定时段数据，可根据实际接口需要进行调整。<img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E9%AB%98%E5%B3%B0%E6%9C%9F%E9%85%8D%E7%BD%AE%E9%9D%A2%E6%9D%BF.png"><br>  <strong>落地成效显著</strong>：误报率大幅下降，从原先的 78.5% 锐减至 12.5%；与此同时，发现问题的能力显著提升，平均每月检出问题数量由 3 个跃升至 11 个以上。</li>
</ul>
<h4 id="精配统一告警"><a href="#精配统一告警" class="headerlink" title="精配统一告警"></a>精配统一告警</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;由于对接渠道较多，同一功能的接口路径截然不同，对接情况也大有不同，进行配置监控面板的告警规则的耗时就因人而异，导致监控配置耗时长，告警规则不统一。<br><strong>1. 解决方案</strong>：</p>
<ul>
<li><strong>公式化配置</strong>：运用公式统一告警规则，提升配置效率。设定持续时间 2 分钟，增强监控敏感度，遇异常能快速响应，防问题扩大。</li>
<li><strong>应对不稳定</strong>：当 30 天内最小值处于 0 - 9 区间且常掉 0 时，靠调整 “观察持续时间” 稳定规则。</li>
<li><strong>动态阈值</strong>：采用阶梯式动态系数设告警阈值，取值更精准。即阈值 = 1 分钟调用量 30 天内最小值（剔异常）× 系数，小数点四舍五入，减少误判。<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E5%91%8A%E8%AD%A6%E9%98%88%E5%80%BC%E5%85%AC%E5%BC%8F%E5%8C%96.png"><br><strong>2. 公式化成效</strong>：配置效率飙升 73.3%，告警规则有效率高达 82%。</li>
</ul>
<h2 id="深化监控2-0建设"><a href="#深化监控2-0建设" class="headerlink" title="深化监控2.0建设"></a>深化监控 2.0 建设</h2><h3 id="阶梯式防控"><a href="#阶梯式防控" class="headerlink" title="阶梯式防控"></a>阶梯式防控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;为了提高应急响应速度，缩短事故时间和合理地分配资源，采取阶梯式防控措施。通过划分 P0、P1、P2 阶段防控，能够对问题按照紧急程度和影响程度进行优先级排序。<br><strong>1. 策略方案</strong><br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E9%98%B6%E6%A2%AF%E5%BC%8F%E9%98%B2%E6%8E%A7%E6%96%B9%E6%A1%88.png"><br><strong>2. 案例成效剖析</strong><br>    有 P1 监控在故障发生时能在 9:38 迅速发现并通知研测介入处理，37 分钟仅损失 523 单；而无监控则会导致故障在 11:50 升级为 P1 故障，且估算 133 分钟后影响将超过 2000 单，可见 P1 监控能有效避免故障升级并减少损失。<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E9%98%B6%E6%A2%AF%E5%BC%8F%E9%98%B2%E6%8E%A7%E6%A1%88%E4%BE%8B.png"></p>
<h3 id="需求上新监控"><a href="#需求上新监控" class="headerlink" title="需求上新监控"></a>需求上新监控</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;随着业务需求的不断变化，监控系统也需要与时俱进。需求上新监控是指根据最新的业务需求，对监控系统进行升级和优化。通过这种方式，监控系统能够更好地适应业务发展，提供更加精准的监控数据。<br>需求上新监控的整体流程如下：<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E9%9C%80%E6%B1%82%E4%B8%8A%E6%96%B0%E7%9B%91%E6%8E%A7%E6%B5%81%E7%A8%8B.png"><br><strong>1. 事前准备</strong></p>
<ul>
<li><strong>需求分析</strong>：收集和分析业务需求，明确监控系统需要满足的具体目标和功能。</li>
<li><strong>风险评估</strong>：识别可能的风险点，并制定相应的风险应对措施。</li>
<li><strong>方案确认</strong>：根据识别的风险点制定监控方案。</li>
<li><strong>监控配置</strong>：将需要监控的内容进行日志平台或 Prometheus 方式进行监控。<br><strong>2. 事中监控</strong></li>
<li><strong>联动监控</strong>：通过综合考虑多个维度的因素，对发布内容进行全面且细致的监控。</li>
<li><strong>问题响应</strong>：对于监控过程中发现的问题，快速响应并采取措施进行回滚、修复或优化。<br><strong>3. 事后复盘</strong></li>
<li><strong>效果评估</strong>：评估监控系统升级和优化的效果，与预期目标进行对比。</li>
<li><strong>问题总结</strong>：总结在事中监控阶段遇到的问题和解决方案，分析问题产生的原因。</li>
<li><strong>经验分享</strong>：将成功经验和教训分享给团队成员，提高团队的整体能力。</li>
<li><strong>持续改进</strong>：根据复盘的结果，制定持续改进计划，为下一次的监控系统升级和优化做准备。</li>
</ul>
<h3 id="错误码分析"><a href="#错误码分析" class="headerlink" title="错误码分析"></a>错误码分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;​将错误码划分成 “通用错误码”、“已出现错误码” 和 “未知错误码” 三大类进行相关处理，然后进行分析治理，判断问题有效性，进而推动治理、记录观察。<br>错误码整体处理流程如下：<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E9%94%99%E8%AF%AF%E7%A0%81%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B.png"><br>本部分通过柱状图展示了不同渠道的错误码数据，具体包括以下错误类型及其占比：<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E5%90%84%E6%B8%A0%E9%81%93%E9%94%99%E8%AF%AF%E7%A0%81%E6%95%B0%E6%8D%AE.png"><br>通过问题类型和根因进行归类，方便后续进行排期优化：<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E9%94%99%E8%AF%AF%E7%B1%BB%E5%9E%8B%E4%B8%8E%E6%A0%B9%E5%9B%A0%E5%BD%92%E7%B1%BB.png"></p>
<h2 id="总结与规划"><a href="#总结与规划" class="headerlink" title="总结与规划"></a>总结与规划</h2><p>&nbsp; &nbsp; 目前，开平服务的监控系统已取得一定成果，有效告警 180 个，有效率达 80.36%，发现 71 个问题，保障了系统正常运行。然而，当前监控系统侧重于系统功能监测，在业务指标监控等方面存在不足。<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E7%9B%91%E6%8E%A7%E6%96%B0%E8%90%BD%E5%9C%B0%E6%88%90%E6%9E%9C.png"><br>我们正朝着更加完善的方向稳步迈进，其最终目标是打造一个全方位、高效且智能化的监控体系，保障业务能够稳定、持续地发展为业务的优化和拓展提供有力的数据支持和决策依据。<br><img src="https://github.com/DamonKoy/images/raw/master/md/%E9%AB%98%E6%95%88%E9%98%B2%E6%8E%A7/%E5%BC%80%E5%B9%B3%E6%9C%8D%E5%8A%A1-%E6%80%BB%E7%BB%93%E4%B8%8E%E8%A7%84%E5%88%92.png"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>防控体系</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>防控</tag>
      </tags>
  </entry>
  <entry>
    <title>目标导向的复盘总结</title>
    <url>/2025/01/10/%E7%9B%AE%E6%A0%87%E5%AF%BC%E5%90%91%E7%9A%84%E5%A4%8D%E7%9B%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="一、值得学习的点"><a href="#一、值得学习的点" class="headerlink" title="一、值得学习的点"></a>一、值得学习的点</h3><ol>
<li>结构化清晰<ul>
<li><strong>内容板块分明</strong>：将复盘内容分为 24 年问题识别、治理思路、落地动作、25 年聚焦方向和目标量化等多个板块，逻辑连贯，层次清晰，便于读者快速抓住重点和整体脉络。例如，在问题识别部分，详细列出了生产质量、数据效能、基线建设、风险治理等不同维度的具体问题，让人一目了然。</li>
<li><strong>条理有序</strong>：每个板块内部也有清晰的条理，如治理思路中针对不同问题提出相应的解决方向，落地动作则进一步细化了具体的执行步骤和时间节点，使整个复盘具有很强的系统性和连贯性。</li>
</ul>
</li>
<li>数据与案例结合<ul>
<li><strong>运用数据支撑</strong>：在阐述问题和成果时，大量使用数据，如 “生产问题对公 / 财务占比问题比例为 72%（45/62），其中需求 + 代码类缺陷占 40%（18/45）”，使内容更具说服力和客观性，能够精准反映实际情况，让读者对问题的严重程度和工作成果有更直观的认识。</li>
<li><strong>辅以案例说明</strong>：虽然图片中未明确体现案例，但这种复盘方式可以借鉴在实际操作中加入具体案例，如在描述数据效能问题时，可举例说明某个具体项目因需求吞吐问题导致的加班情况及影响，使复盘内容更加生动具体，易于理解和共鸣。</li>
</ul>
</li>
<li>目标导向明确<ul>
<li><strong>聚焦未来方向</strong>：不仅总结过去的问题和经验，还明确提出了 25 年的聚焦方向和目标量化，如 “规风险防故障、保交付提效能、降 bug 提质量、推基线筑基座、予指导促成长” 等，并且每个方向都有相应的目标量化（虽然具体内容未展示，但这种思路很重要），为后续工作提供了清晰的指引和方向，有助于团队成员明确工作重点和努力目标。</li>
<li><strong>行动与目标关联紧密</strong>：落地动作与目标紧密相连，如为了实现 “保交付提效能” 的目标，制定了 “项目沟通，A/B 角建设，过程把控” 等具体的落地动作，并且明确了时间节点，确保目标能够通过具体的行动得以实现，体现了从目标到行动的有效衔接。</li>
</ul>
</li>
</ol>
<h3 id="二、练习方法"><a href="#二、练习方法" class="headerlink" title="二、练习方法"></a>二、练习方法</h3><ol>
<li>学习模板与框架<ul>
<li><strong>收集优秀复盘案例</strong>：可以从公司内部的优秀复盘文档、行业报告、专业书籍或在线资源中收集类似这种结构化的复盘总结案例，仔细研究它们的框架和内容组织方式，分析每个板块的作用和相互关系。</li>
<li><strong>拆解模板</strong>：将收集到的复盘模板进行拆解，明确各个部分的标题、内容要点和呈现形式。例如，问题识别部分可以包括问题分类、具体问题描述、影响范围等；治理思路可以从策略方向、方法选择等角度展开；落地动作要涵盖具体任务、责任人、时间节点等要素；未来方向和目标量化则要明确具体的目标指标和实现路径。</li>
</ul>
</li>
<li>实践应用<ul>
<li><strong>选择复盘主题</strong>：可以从日常工作、学习或生活中的某个项目、任务或阶段入手，如一次团队项目的完成、一门课程的学习、一次健身计划的执行等，确定要进行复盘的主题。</li>
<li><strong>按照模板填充内容</strong>：依据之前学习的模板，逐步填充复盘内容。在问题识别阶段，认真回顾过程，全面梳理出现的问题，尽可能详细地记录下来，并尝试进行分类和分析；在治理思路部分，结合问题的本质和自身的经验，思考可能的解决方向和方法；落地动作要具体可操作，明确每一步该怎么做、谁来做、什么时候做；对于未来方向和目标量化，要根据复盘的结果和实际情况，制定合理的目标，并将其细化为可衡量的指标和具体的行动计划。</li>
<li><strong>定期复盘练习</strong>：养成定期复盘的习惯，刚开始可以每周或每月对一些小的事项进行复盘，随着熟练度的提高，逐渐对更大的项目或更长的时间段进行复盘。通过不断的实践，逐渐掌握这种复盘总结的方法，并根据实际情况不断优化和调整。</li>
</ul>
</li>
<li>反馈与改进<ul>
<li><strong>寻求他人反馈</strong>：将自己完成的复盘总结分享给同事、上级、朋友或导师等，请他们从内容完整性、逻辑性、可读性等方面给出反馈和建议。例如，他们可能会指出某些问题分析不够深入、治理思路不够清晰、落地动作缺乏可行性等问题，认真听取这些意见，并思考如何改进。</li>
<li><strong>自我反思与优化</strong>：在每次复盘后，自己也要进行反思，回顾整个复盘过程，思考哪些地方做得好，哪些地方还需要改进。比如，是否能够更准确地识别问题、治理思路是否能够更有效地解决问题、落地动作是否能够按时完成等。根据反思的结果，对下一次复盘进行优化，不断提高复盘总结的质量和效果。</li>
</ul>
</li>
</ol>
<p>通过以上学习和练习方法，你可以逐渐掌握这种复盘总结的方式，并将其应用到实际工作和生活中，不断提升自己的总结能力和问题解决能力。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>学习方法</category>
      </categories>
      <tags>
        <tag>复盘</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>婴儿手册</title>
    <url>/2025/01/20/%E5%A9%B4%E5%84%BF%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>月龄</th>
<th>常见症状</th>
<th>表现</th>
<th>注意事项</th>
<th>成长特征</th>
<th>喂养建议</th>
<th>早教重点</th>
<th>疫苗接种</th>
<th>玩具推荐</th>
</tr>
</thead>
<tbody><tr>
<td> 1 个月</td>
<td>溢奶</td>
<td>喂奶后从口腔流出少量奶液</td>
<td>喂奶后适当竖抱、拍嗝；喂奶量和速度要适宜</td>
<td>视觉开始聚焦，能短暂注视物体；颈部力量较弱，抬头只能持续片刻</td>
<td>按需喂养，每次奶量约 60 - 90 毫升，每天 7 - 8 次</td>
<td>进行简单的听觉刺激，如轻声说话、播放轻柔音乐</td>
<td>出生时已接种卡介苗和乙肝疫苗第一针</td>
<td>黑白卡，锻炼视觉追踪</td>
</tr>
<tr>
<td></td>
<td>鼻塞</td>
<td>呼吸声重，鼻子不通气</td>
<td>注意室内湿度，可适当用生理盐水滴鼻</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 2 个月</td>
<td>肠绞痛</td>
<td>突然大声哭闹，腹部紧张、发硬</td>
<td>可尝试飞机抱、按摩腹部缓解；喂奶后避免剧烈活动</td>
<td>开始发出 “咕咕” 声，能与大人短暂互动；俯卧时抬头时间增长，角度可达 45 度左右</td>
<td>奶量每次约 90 - 120 毫升，每天 6 - 7 次</td>
<td>进行黑白卡视觉训练</td>
<td>脊髓灰质炎疫苗（第一剂），口服后需观察宝宝有无不良反应</td>
<td>彩色手摇铃，锻炼听觉和抓握能力</td>
</tr>
<tr>
<td></td>
<td>湿疹</td>
<td>皮肤出现红斑、丘疹，伴有瘙痒</td>
<td>保持皮肤清洁、干燥，避免过热，遵医嘱用药</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 3 个月</td>
<td>口水疹</td>
<td>口周皮肤发红、粗糙</td>
<td>及时擦拭口水，涂抹润肤霜保护皮肤</td>
<td>头控能力较好，能稳定抬头；喜欢抓握物品，手眼协调能力开始发展</td>
<td>奶量每次约 120 - 150 毫升，每天 6 - 7 次</td>
<td>多和宝宝说话，进行简单的亲子互动</td>
<td>脊髓灰质炎疫苗（第二剂），无细胞百白破疫苗（第一剂），接种后注意观察局部有无红肿、发热等情况</td>
<td>软质球类玩具，如橡胶球，锻炼抓握和感知</td>
</tr>
<tr>
<td></td>
<td>厌奶</td>
<td>吃奶量减少，吃奶时注意力不集中</td>
<td>营造安静吃奶环境，不要强迫喂奶</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 4 个月</td>
<td>出牙不适</td>
<td>牙龈红肿、爱咬东西、流口水增多</td>
<td>可提供牙胶缓解不适，注意口腔清洁</td>
<td>能翻身，从仰卧翻至侧卧；开始对周围事物好奇，喜欢探索</td>
<td>奶量每次约 150 - 180 毫升，每天 5 - 6 次；可尝试添加少量果汁（稀释后）</td>
<td>训练宝宝翻身，用玩具引导</td>
<td>无细胞百白破疫苗（第二剂）</td>
<td>抓握类玩具如摇铃，锻炼手部抓握和感知能力</td>
</tr>
<tr>
<td></td>
<td>腹泻</td>
<td>大便次数增多，性状变稀</td>
<td>注意饮食卫生，及时补充水分，观察精神状态</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 5 个月</td>
<td>呼吸道感染</td>
<td>咳嗽、打喷嚏、发热</td>
<td>保证充足睡眠，根据气温增减衣物</td>
<td>扶坐时背部能挺直；能辨别亲人声音，对熟悉的声音有反应</td>
<td>奶量每次约 180 - 210 毫升，每天 5 - 6 次</td>
<td>训练宝宝靠坐，用声音和玩具吸引注意力</td>
<td>无细胞百白破疫苗（第三剂）</td>
<td>布书，锻炼手部精细动作和认知</td>
</tr>
<tr>
<td></td>
<td>呕吐</td>
<td>进食后呕吐，可能伴有恶心</td>
<td>喂奶后避免马上平卧，呕吐严重时及时就医</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 6 个月</td>
<td>缺铁性贫血</td>
<td>面色苍白、精神萎靡、食欲下降</td>
<td>及时添加含铁丰富的辅食，如高铁米粉等</td>
<td>能独立坐一会儿；开始添加辅食，逐渐适应不同食物</td>
<td>开始添加辅食，先从高铁米粉开始，每天 1 次，奶量每次约 180 - 210 毫升，每天 4 - 5 次</td>
<td>训练独坐，进行简单的语言启蒙</td>
<td>乙肝疫苗（第三针），A 群流脑多糖疫苗（第一剂）</td>
<td>牙胶、咬咬乐，缓解出牙不适，锻炼咀嚼</td>
</tr>
<tr>
<td></td>
<td>幼儿急疹</td>
<td>突发高热，热退后出疹</td>
<td>高热时及时物理降温或遵医嘱用退烧药</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 7 个月</td>
<td>便秘</td>
<td>大便干结、排便困难</td>
<td>增加膳食纤维摄入，多补充水分</td>
<td>会爬行，开始探索更大的空间；能听懂自己名字</td>
<td>辅食可增加蔬菜泥、水果泥，每天 2 次，奶量每次约 180 - 210 毫升，每天 4 - 5 次</td>
<td>鼓励宝宝爬行，用玩具引导方向</td>
<td> A 群流脑多糖疫苗（第二剂）</td>
<td>爬行玩具，如会动的玩具车，吸引宝宝爬行</td>
</tr>
<tr>
<td></td>
<td>夜醒频繁</td>
<td>夜间睡眠不安稳，频繁醒来</td>
<td>建立规律睡眠习惯，避免睡前过度兴奋</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 8 个月</td>
<td>分离焦虑</td>
<td>与亲人分开时哭闹、不安</td>
<td>逐渐增加宝宝独处时间，给予安抚和安全感</td>
<td>能扶着物体站立；开始模仿简单动作和声音</td>
<td>辅食可添加肉泥、蛋黄等，每天 2 - 3 次，奶量每次约 150 - 180 毫升，每天 3 - 4 次</td>
<td>玩躲猫猫游戏锻炼认知能力，鼓励宝宝模仿动作</td>
<td>麻疹疫苗（第一剂），乙脑减毒活疫苗（第一剂）或乙脑灭活疫苗（第一、二剂）</td>
<td>积木，锻炼手部协调和空间认知</td>
</tr>
<tr>
<td></td>
<td>皮肤过敏</td>
<td>接触某些物质后皮肤出现皮疹、瘙痒</td>
<td>注意观察过敏原，避免接触</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 9 个月</td>
<td>口腔炎症</td>
<td>口腔黏膜出现溃疡、疱疹，疼痛影响进食</td>
<td>保持口腔清洁，饮食清淡，避免刺激性食物</td>
<td>能独站片刻；能用简单手势表达需求，如挥手再见</td>
<td>辅食种类逐渐丰富，可尝试软面条等，每天 3 次，奶量每次约 150 - 180 毫升，每天 3 - 4 次</td>
<td>训练独站，教宝宝简单手势</td>
<td>麻风腮疫苗（第一剂），A 群 C 群流脑多糖疫苗（第一剂，间隔 3 个月）</td>
<td>学步推车，辅助宝宝学步</td>
</tr>
<tr>
<td></td>
<td>消化不良</td>
<td>腹胀、食欲减退、大便有不消化食物残渣</td>
<td>调整饮食结构，少量多餐</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 10 个月</td>
<td>发热惊厥</td>
<td>高热时突然出现抽搐、意识丧失</td>
<td>保持呼吸道通畅，避免强行按压，及时就医</td>
<td>能扶着走几步；认识常见物品，如灯、门等</td>
<td>辅食可适当增加固体食物，如小馒头等，每天 3 次，奶量每次约 120 - 150 毫升，每天 2 - 3 次</td>
<td>训练扶走，认识更多日常物品</td>
<td>乙脑减毒活疫苗（第二剂）或乙脑灭活疫苗（第三剂）</td>
<td>拖拉玩具，锻炼行走和探索兴趣</td>
</tr>
<tr>
<td></td>
<td>蚊虫叮咬</td>
<td>皮肤出现红肿、瘙痒的包块</td>
<td>做好防蚊措施，避免宝宝抓挠</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 11 个月</td>
<td>运动损伤</td>
<td>学走路时容易摔倒、磕碰</td>
<td>提供安全的活动环境，适当防护</td>
<td>能独自走几步；开始有自己的想法，会用哭闹表达不满</td>
<td>辅食接近成人饮食，每天 3 次，奶量每次约 120 - 150 毫升，每天 2 - 3 次</td>
<td>鼓励宝宝独立行走，教宝宝简单词语</td>
<td>甲肝减毒活疫苗（第一剂）或甲肝灭活疫苗（第一剂）</td>
<td>球类玩具，锻炼运动能力和反应</td>
</tr>
<tr>
<td></td>
<td>耳部感染</td>
<td>抓耳朵、哭闹不安、发热</td>
<td>保持耳部清洁，避免进水，如有异常及时就医</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td> 12 个月</td>
<td>生长痛</td>
<td>下肢疼痛，尤其是夜间，不伴有红肿</td>
<td>适当按摩、热敷缓解疼痛，保证营养和休息</td>
<td>能独立行走；会说简单的词语，如 “爸爸”“妈妈”</td>
<td> 可逐渐过渡到正常饮食，每天 3 次，奶量每次约 120 - 150 毫升，每天 1 - 2 次</td>
<td>教宝宝说话，鼓励表达需求</td>
<td>无（部分地区可能有加强疫苗接种安排，具体咨询当地接种点）</td>
<td>拼图玩具，锻炼思维和动手能力</td>
</tr>
<tr>
<td></td>
<td>感冒</td>
<td>流涕、咳嗽、发热等症状</td>
<td>多休息，多喝水，症状严重时遵医嘱用药</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>生活点滴</category>
      </categories>
      <tags>
        <tag>婴儿</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>技术分享窍门</title>
    <url>/2025/01/14/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E7%AA%8D%E9%97%A8/</url>
    <content><![CDATA[<p>一篇好的技术文章有什么？</p>
<ul>
<li>把复杂的问题简单化</li>
<li>有推导和方案比较</li>
<li>思路和方法论让人一通百通</li>
</ul>
<p>进行 <strong>问题 –&gt; 解决 –&gt; 复盘</strong> 这模式进行讲解，带着问题进行演示，引导读者聚焦思考。</p>
<ul>
<li>用问题来吸引读者，带着读者进行思考</li>
<li>给出几种不同的方案，比较优劣，让读者有参预感</li>
<li>给出最佳的实践结论，进行升华</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>心得分享</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>分享</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>AnyDesk 远程控制</title>
    <url>/2025/01/14/AnyDesk%E8%BF%9C%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">工具 / 配置</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"> AnyDesk</td>
<td align="left"> 远程控制</td>
</tr>
<tr>
<td align="left">远程唤醒</td>
<td align="left">防止设备睡眠无法进行远程访问</td>
</tr>
</tbody></table>
<h2 id="远程唤醒"><a href="#远程唤醒" class="headerlink" title="远程唤醒"></a>远程唤醒</h2><h3 id="安装wakeonlan"><a href="#安装wakeonlan" class="headerlink" title="安装wakeonlan"></a>安装 wakeonlan</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">brew install --build-from-source wakeonlan</span><br></pre></td></tr></tbody></table></figure>

<p>运行 wakeonlan 172.27.3.1 提示 zsh: /usr/local/bin/wakeonlan: bad interpreter: /usr/bin/perl5.30: no such file or directory</p>
<p><img src="https://github.com/DamonKoy/images/raw/master/md/wakeonlan%E8%BF%90%E8%A1%8C%E5%A4%B1%E8%B4%A5.png" alt="image-20250114103916776"></p>
<p>查看 wakeonlan 路径</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ which wakeonlan</span><br><span class="line">/usr/local/bin/wakeonlan</span><br></pre></td></tr></tbody></table></figure>

<p>修改 wakeonlan 文件，将第一行的 perl5.30 修改为 perl ，强制保存 wq!</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">➜  ~ sudo vi /usr/local/bin/wakeonlan</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://github.com/DamonKoy/images/raw/master/md/%E4%BF%AE%E6%94%B9wakeonlan.png" alt="image-20250114105129636"></p>
<p>再次运行 wakeonlan</p>
<p><img src="https://github.com/DamonKoy/images/raw/master/md/wakeonlan%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png" alt="image-20250114105402945"></p>
<h3 id="Mac-电脑配置唤醒以供访问"><a href="#Mac-电脑配置唤醒以供访问" class="headerlink" title="Mac 电脑配置唤醒以供访问"></a>Mac 电脑配置唤醒以供访问</h3><p><img src="https://github.com/DamonKoy/images/raw/master/md/mac%E7%B3%BB%E7%BB%9F%E6%89%93%E5%BC%80%E5%94%A4%E9%86%92%E5%8A%9F%E8%83%BD.png" alt="image-20250114143420535"> </p>
<h3 id="安装AnyDesk"><a href="#安装AnyDesk" class="headerlink" title="安装AnyDesk"></a>安装 AnyDesk</h3><p>1、<a href="https://anydesk.com.cn/zhs/downloads/mac-os">AnyDesk 安力桌</a>官网下载客户端</p>
<p>2、进行无人值守访问配置，开启并设置访问密码</p>
<p>3、两台设备安装配置好后，输入目标地址进行远程控制</p>
<p><img src="https://gitee.com/Damon_Koy/images/raw/master/md/AnyDesk%E5%B7%A5%E4%BD%9C%E5%8F%B0%E7%95%8C%E9%9D%A2.png" alt="image-20250114144325013"></p>
<p><img src="https://github.com/DamonKoy/images/raw/master/md/AnyDesk%E8%BF%9B%E8%A1%8C%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E8%AE%BF%E9%97%AE%E9%85%8D%E7%BD%AE.png" alt="image-20250114143804966"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>互联</category>
      </categories>
      <tags>
        <tag>远程控制</tag>
        <tag>AnyDesk</tag>
      </tags>
  </entry>
  <entry>
    <title>NAS 个人使用指南</title>
    <url>/2025/01/13/NAS%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>hexo 插件汇集</title>
    <url>/2025/01/09/hexo%E6%8F%92%E4%BB%B6%E6%B1%87%E9%9B%86/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>gitee 与 github 仓库数据同步</title>
    <url>/2025/01/08/gitee%E4%B8%8Egithub%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>发现是防盗链限制的问题，需要解决 referrer</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "code": "40310014",</span><br><span class="line">  "msg": "invalid Referer header"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>



<p>使用 gitee 迁移 github 的方法</p>
<p>你可以通过以下方式申请 GitHub 私人令牌：</p>
<ol>
<li><p>登录与 Gitee 绑定的 GitHub 帐号；</p>
</li>
<li><p>通过路径「用户头像」→「Settings」进入「Developer setting」；</p>
</li>
<li><p>选择「Personal access tokens」选项后点击「Generate new token」；</p>
</li>
<li><p>「Note」字段可以随意填写；例如，Gitee_Mirror；</p>
</li>
<li><p>「Select scopes」字段请根据你的需求进行勾选；<br> repo 字段为必选字段，请您直接勾选；<br> admin:repo_hook 字段为可选字段，用于自动生成 webhook；<br> 当您需要 Gitee 自动从 GitHub 同步仓库时，建议您勾选。</p>
</li>
<li><p>点击「Generate token」生成私人令牌；</p>
</li>
</ol>
<p>7. 复制私人令牌并妥善保管。</p>
<p>私人令牌</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>gitee</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 框架搭建个人博客</title>
    <url>/2025/01/06/hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/">hexo 食用指南</a></p>
<p>轻量、便携、静态、一键部署</p>
<p>安装：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装hexo框架</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化博客</span></span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm依赖安装</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行hexo</span></span><br><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure>



<p>基本操作：</p>
<p> _config.yml 文件下进行修改 hexo 基本配置</p>
<p><img src="https://gitee.com/Damon_Koy/images/raw/master/md/hexo%E7%9A%84config%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE" alt="image-20250109144054648"></p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建文章，运行后在 <span class="built_in">source</span>/_posts/ 下生成 {文章标题}.md 文档</span></span><br><span class="line">hexo new '文章标题'</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://gitee.com/Damon_Koy/images/raw/master/md/hexo%E7%9A%84config%E9%85%8D%E7%BD%AE%E6%96%B0%E5%A2%9E%E4%BF%A1%E6%81%AF" alt="image-20250109144418134"></p>
<p>部署：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理缓存、生产静态页面、远程部署</span></span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></tbody></table></figure>



<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 主题及样式调整</title>
    <url>/2025/01/04/hexo%E4%B8%BB%E9%A2%98%E5%8F%8A%E6%A0%B7%E5%BC%8F%E8%B0%83%E6%95%B4/</url>
    <content><![CDATA[<p>主题推荐</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1.Sakura 非常炫，缺点加载慢 https://github.com/honjun/hexo-theme-sakura</span><br><span class="line">2.Matery 预加载，强推 https://github.com/blinkfox/hexo-theme-matery</span><br><span class="line">3.3-hexo 三段式，适合博文多的 https://github.com/yelog/hexo-theme-3-hexo</span><br><span class="line">4.Butterfly 也是个好看的 https://github.com/jerryc127/hexo-theme-butterfly/tree/dev</span><br><span class="line">5.Next 功能集成多，简洁 https://github.com/theme-next/hexo-theme-next</span><br></pre></td></tr></tbody></table></figure>



<p>建页面 配置后页面点击分类后会显示 Can not get /tags/ （大概是这个报错）表示找不到页面，此时则需要进入 hexo 根目录，并执行下述命令创建页面：<br>hexo new page “categories”<br>hexo new page “tags”</p>
<p>此时根目录的 /source 目录下会分别出现两个文件夹 categories 和 tags ，里面都有一个 index.md 文件，点击进入后为其添加 type ：<br>title: categories<br>date: 2023-08-11 16:22:41<br>type: categories # 填写对应的页面类型</p>
<p>此时重新编译运行即可。</p>
<p>七、添加搜索功能<br>1、安装&nbsp;hexo-generator-searchdb&nbsp;插件<br>css 代码解读复制代码 $ npm install hexo-generator-searchdb –save</p>
<p>2、打开 站点配置文件 找到 Extensions 在下面添加<br>yaml 代码解读复制代码# 搜索<br>search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000</p>
<p>3、打开 主题配置文件 找到 Local search，将 enable 设置为 true</p>
<ol start="7">
<li>图片点击放大预览</li>
</ol>
<h1 id="找到文件-themes-next-config-yml"><a href="#找到文件-themes-next-config-yml" class="headerlink" title="找到文件 /themes/next/_config.yml"></a>找到文件 /themes/next/_config.yml</h1><h1 id="修改以下代码"><a href="#修改以下代码" class="headerlink" title="修改以下代码"></a>修改以下代码</h1><p>fancybox: true</p>
<ol start="8">
<li>图片懒加载</li>
</ol>
<h1 id="找到文件-themes-next-config-yml-1"><a href="#找到文件-themes-next-config-yml-1" class="headerlink" title="找到文件 /themes/next/_config.yml"></a>找到文件 /themes/next/_config.yml</h1><h1 id="增加以下代码"><a href="#增加以下代码" class="headerlink" title="增加以下代码"></a>增加以下代码</h1><p>lazyload: true</p>
<ol start="11">
<li>添加字数统计及阅读时长</li>
</ol>
<h1 id="找到文件-themes-next-config-yml-2"><a href="#找到文件-themes-next-config-yml-2" class="headerlink" title="找到文件 /themes/next/_config.yml"></a>找到文件 /themes/next/_config.yml</h1><h1 id="增加以下代码-1"><a href="#增加以下代码-1" class="headerlink" title="增加以下代码"></a>增加以下代码</h1><p>readingtime:<br>  enable: true</p>
<ol start="12">
<li>置顶文章<br>使用文章的 top 属性</li>
</ol>
<p>使用插件<br>安装插件：在 Hexo 项目根目录下，通过命令行执行 npm install hexo-generator-index-pin-top –save 命令，安装 hexo-generator-index-pin-top 插件，该插件可以帮助实现文章置顶功能。<br>配置插件：安装完成后，在 Hexo 的站点配置文件_config.yml 中添加插件的配置信息。例如：<br>yaml<br>index_generator:<br>  path: ‘’<br>  per_page: 10<br>  order_by: ‘-date’<br>pin_top:<br>  order_by: ‘top’<br>  layout: ‘post’<br>这里配置了 pin_top 相关的排序规则，按照文章的 top 属性进行排序。</p>
<ol start="3">
<li>设置文章置顶：在需要置顶的文章的 Front Matter 中添加 top 属性，如 top: 100。然后执行 hexo clean &amp;&amp; hexo g 命令，重新生成静态页面，插件会根据配置和文章的 top 属性将文章置顶显示。<br>编辑文章的 Front Matter：打开需要置顶的文章的 Markdown 源文件，在文章的 Front Matter（即文章开头用 — 包裹的部分）中添加 top 属性，并为其指定一个数值。数值越大，文章的置顶优先级越高。例如：<br>yaml</li>
</ol>
<p>title: 置顶文章标题<br>date: 2025-01-07 12:00:00<br>top: 100</p>
<ol start="13">
<li>统计文章字数与阅读时长</li>
</ol>
<p>安装插件<br>npm install hexo-symbols-count-time –save</p>
<p>根目录的_config.yml</p>
<h2 id="设置文章字数统计"><a href="#设置文章字数统计" class="headerlink" title="设置文章字数统计"></a>设置文章字数统计</h2><p>symbols_count_time:<br>  symbols: true # 开启文章字数统计<br>  time: true # 开启文章阅读时长统计<br>  total_symbols: false # 关闭站点总字数统计<br>  total_time: false # 关闭站点总阅读时长统计<br>  exclude_codeblock: true # 排除代码块字数统计</p>
<p>主题下设置_config.yml</p>
<h2 id="设置文章字数统计-1"><a href="#设置文章字数统计-1" class="headerlink" title="设置文章字数统计"></a>设置文章字数统计</h2><p>symbols_count_time:<br>  symbols: true # 开启文章字数统计<br>  time: true # 开启文章阅读时长统计<br>  total_symbols: false # 关闭站点总字数统计<br>  total_time: false # 关闭站点总阅读时长统计<br>  exclude_codeblock: true # 排除代码块字数统计</p>
<p>主题下的 layout 文件夹的 post.swig 文件添加代码：</p>





<h2 id="优化中英混排问题"><a href="#优化中英混排问题" class="headerlink" title="优化中英混排问题"></a>优化中英混排问题</h2><p>可实现中英文自动加空格，能解决中英文混排时的格式问题，让文章排版更规范。</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-pangu</span><br><span class="line">hexo clean</span><br></pre></td></tr></tbody></table></figure>



<h2 id="滑动扰流板"><a href="#滑动扰流板" class="headerlink" title="滑动扰流板"></a>滑动扰流板</h2><p>可以在文章中添加隐藏内容区域，通过点击标题上的滚动箭头展开查看，适用于隐藏电影剧情解析、游戏攻略答案等敏感或需逐步揭示的信息，增强阅读互动性</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-sliding-spoiler --save</span><br></pre></td></tr></tbody></table></figure>

<p>配置：修改根目录的 _config.yml 文件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  hexo-sliding-spoiler</span><br></pre></td></tr></tbody></table></figure>

<p>文章使用：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{% spoiler title %}</span><br><span class="line">content</span><br><span class="line">{% endspoiler %}</span><br></pre></td></tr></tbody></table></figure>



<h2 id="Hexo跨博客文章推荐插件"><a href="#Hexo跨博客文章推荐插件" class="headerlink" title="Hexo跨博客文章推荐插件"></a>Hexo 跨博客文章推荐插件</h2><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-recommended-posts --save</span><br></pre></td></tr></tbody></table></figure>

<p>下载推荐文章列表</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">hexo recommend</span><br></pre></td></tr></tbody></table></figure>







<h2 id="优化SEO"><a href="#优化SEO" class="headerlink" title="优化SEO"></a>优化 SEO</h2><p><a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap?tab=readme-ov-file">https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap?tab=readme-ov-file</a></p>
<p>可生成对搜索引擎更友好的站点地图，帮助提升网站的 SEO 表现，通过自动生成详细的网站内容索引，让搜索引擎能更高效地索引博客文章</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></tbody></table></figure>

<p>配置：修改根目录的 _config.yml 文件</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">    tag: false</span><br><span class="line">    category: false</span><br></pre></td></tr></tbody></table></figure>



<h2 id="屏蔽文章修改时间"><a href="#屏蔽文章修改时间" class="headerlink" title="屏蔽文章修改时间"></a>屏蔽文章修改时间</h2><p>修改文档：/hexo 根目录 /themes/next/layout/_macro/post.swig</p>
<p>用最便捷且简单的方法进行修改，方便需要时切换回去（删除红框内容即可）</p>
<p><img src="https://github.com/DamonKoy/images/raw/master/md/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%B1%8F%E8%94%BD%E6%96%87%E7%AB%A0%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E7%9A%84%E5%B1%95%E7%A4%BA%E9%80%BB%E8%BE%91.png" alt="image-20250110151240652"></p>
<p>效果如下：</p>
<p><img src="https://github.com/DamonKoy/images/raw/master/md/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0%E4%BF%AE%E6%94%B9%E6%97%B6%E9%97%B4%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="image-20250110151553760"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器安装 docker</title>
    <url>/2025/01/04/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<h2 id="服务器安装docker"><a href="#服务器安装docker" class="headerlink" title="服务器安装docker"></a>服务器安装 docker</h2><h4 id="连接服务器："><a href="#连接服务器：" class="headerlink" title="连接服务器："></a>连接服务器：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ssh test@192.168.216.210</span><br></pre></td></tr></tbody></table></figure>

<h4 id="安装docker："><a href="#安装docker：" class="headerlink" title="安装docker："></a>安装 docker：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install docker</span><br></pre></td></tr></tbody></table></figure>

<h4 id="安装后设置开机启动："><a href="#安装后设置开机启动：" class="headerlink" title="安装后设置开机启动："></a>安装后设置开机启动：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></tbody></table></figure>

<h4 id="修改docker镜像源："><a href="#修改docker镜像源：" class="headerlink" title="修改docker镜像源："></a>修改 docker 镜像源：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></tbody></table></figure>

<p>内容为：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">   "registry-mirrors" : ["https://almtd3fa.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="重启docker："><a href="#重启docker：" class="headerlink" title="重启docker："></a>重启 docker：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></tbody></table></figure>

<h4 id="在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如："><a href="#在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如：" class="headerlink" title="在主机上创建目录，并添加读写权限以便jenkins应用运行时读写文件，如："></a>在主机上创建目录，并添加读写权限以便 jenkins 应用运行时读写文件，如：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo mkdir -p /var/jenkins_node</span><br><span class="line">sudo chmod 777 /var/jenkins_node</span><br></pre></td></tr></tbody></table></figure>

<h4 id="拉取jenkins镜像："><a href="#拉取jenkins镜像：" class="headerlink" title="拉取jenkins镜像："></a>拉取 jenkins 镜像：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker pull jenkins/jenkins:lts</span><br></pre></td></tr></tbody></table></figure>

<h4 id="创建数据卷，用于持久化Jenkins容器的数据到宿主机"><a href="#创建数据卷，用于持久化Jenkins容器的数据到宿主机" class="headerlink" title="创建数据卷，用于持久化Jenkins容器的数据到宿主机"></a>创建数据卷，用于持久化 Jenkins 容器的数据到宿主机</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker volume create jenkins_data</span><br></pre></td></tr></tbody></table></figure>

<h4 id="运行jenkins-d为后台进行-–name为设置名称"><a href="#运行jenkins-d为后台进行-–name为设置名称" class="headerlink" title="运行jenkins -d为后台进行  –name为设置名称"></a>运行 jenkins -d 为后台进行  –name 为设置名称</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker run -d --name jenkins --restart always -p 5000:5000  -p 8080:8080 -p 50000:50000 -v /home/test/jenkins:/home/test/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/docker%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4.png" alt="image-20200709190541585"></p>
<h4 id="查看容器进程："><a href="#查看容器进程：" class="headerlink" title="查看容器进程："></a>查看容器进程：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></tbody></table></figure>

<img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/docker%E6%9F%A5%E7%9C%8B%E5%AE%B9%E5%99%A8%E8%BF%9B%E7%A8%8B.png" alt="image-20200709190638633">

<h4 id="通过查看容器log进行查找jenkins初始密码：（xxxx-容器-为ID）"><a href="#通过查看容器log进行查找jenkins初始密码：（xxxx-容器-为ID）" class="headerlink" title="通过查看容器log进行查找jenkins初始密码：（xxxx 容器 为ID）"></a>通过查看容器 log 进行查找 jenkins 初始密码：（xxxx 容器 为 ID）</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker logs XXXX</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/docker%E6%9F%A5%E7%9C%8Blog.png" alt="image-20200709190807940"></p>
<h4 id="通过内网访问服务器jenkins"><a href="#通过内网访问服务器jenkins" class="headerlink" title="通过内网访问服务器jenkins"></a>通过内网访问服务器 jenkins</h4><p><a href="http://192.168.216.210:8080/">http://192.168.216.210:8080/</a></p>
<h4 id="删除对应绑定网桥"><a href="#删除对应绑定网桥" class="headerlink" title="删除对应绑定网桥"></a>删除对应绑定网桥</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker network disconnect --force bridge jenkins</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除-jenkins容器，xxxx-容器-为ID"><a href="#删除-jenkins容器，xxxx-容器-为ID" class="headerlink" title="删除 jenkins容器，xxxx 容器 为ID"></a>删除 jenkins 容器，xxxx 容器 为 ID</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker rm -f XXXX</span><br></pre></td></tr></tbody></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器:"></a>停止容器:</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker stop jenkins</span><br></pre></td></tr></tbody></table></figure>

<h4 id="重启容器："><a href="#重启容器：" class="headerlink" title="重启容器："></a>重启容器：</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker restart &lt;container_id&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="从宿主机客户进入容器"><a href="#从宿主机客户进入容器" class="headerlink" title="从宿主机客户进入容器"></a>从宿主机客户进入容器</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker exec -it -u root jenkins /bin/bash</span><br></pre></td></tr></tbody></table></figure>

<h4 id="进入容器后建立-ssh目录，创建密钥文件私钥id-rsa，公钥id-rsa-pub"><a href="#进入容器后建立-ssh目录，创建密钥文件私钥id-rsa，公钥id-rsa-pub" class="headerlink" title="进入容器后建立.ssh目录，创建密钥文件私钥id_rsa，公钥id_rsa.pub"></a>进入容器后建立.ssh 目录，创建密钥文件私钥 id_rsa，公钥 id_rsa.pub</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mkdir ~/.ssh &amp;&amp; cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa		# 一直回车即可</span><br></pre></td></tr></tbody></table></figure>

<h4 id="更新容器配置-修改为自动运行或停止自动运行"><a href="#更新容器配置-修改为自动运行或停止自动运行" class="headerlink" title="更新容器配置(修改为自动运行或停止自动运行)"></a>更新容器配置 (修改为自动运行或停止自动运行)</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker update --restart always &lt;容器ID号或者容器别名&gt;</span><br><span class="line">docker update --restart no &lt;容器ID号或者容器别名&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="修改容器别名"><a href="#修改容器别名" class="headerlink" title="修改容器别名"></a>修改容器别名</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker rename &lt;容器原来名&gt; &lt;要改为的名字&gt;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="获取容器元挂载"><a href="#获取容器元挂载" class="headerlink" title="获取容器元挂载"></a>获取容器元挂载</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker inspect &lt;容器名&gt; | grep Mounts -A 20</span><br></pre></td></tr></tbody></table></figure>

<h4 id="修改已存在容器映射"><a href="#修改已存在容器映射" class="headerlink" title="修改已存在容器映射"></a>修改已存在容器映射</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo service docker stop</span><br><span class="line">sudo docker inspect &lt;容器名&gt;</span><br><span class="line"># 查看id的hash值</span><br><span class="line">sudo vi /var/lib/docker/containers/&lt;hash_of_the_container&gt;/hostconfig.json</span><br><span class="line">sudo vi /var/lib/docker/containers/&lt;hash_of_the_container&gt;/config.v2.json</span><br><span class="line"># 在 hostconfig.json 里有 "PortBindings":{} 这个配置项，可以改成 "PortBindings":{"80/tcp":[{"HostIp":"","HostPort":"8080"}]} 这里 80 是容器端口， 8080 是本地端口， 然后在 config.v2.json 里面添加一个配置项 "ExposedPorts":{"80/tcp":{}} , 将这个配置项添加到 "Tty": true, 前面，我不知道添加到别的地方会不会有影响，因为经过对比正常的端口映射配置项是在这个位置，这个就是将容器内部端口暴露出来，如果不加这一句端口映射不会成功的，最后重启 docker的守护进程 service docker restart</span><br><span class="line">sudo service docker restart</span><br></pre></td></tr></tbody></table></figure>

<h4 id="查看映射端口"><a href="#查看映射端口" class="headerlink" title="查看映射端口"></a>查看映射端口</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">docker port CONTAINER_ID</span><br></pre></td></tr></tbody></table></figure>

<h4 id="查看容器的IP地址"><a href="#查看容器的IP地址" class="headerlink" title="查看容器的IP地址"></a>查看容器的 IP 地址</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker inspect --format='{{.NetworkSettings.IPAddress}}' ID/NAMES</span><br></pre></td></tr></tbody></table></figure>

<h4 id="提交镜像（提交时会导致docker进程阻塞）"><a href="#提交镜像（提交时会导致docker进程阻塞）" class="headerlink" title="提交镜像（提交时会导致docker进程阻塞）"></a>提交镜像（提交时会导致 docker 进程阻塞）</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo docker commit -a 'zhiquan.feng' -m '提交融合QA平台和接口自动化的jenkins项目' 87e71042d3b8 chuman/jenkins:v1</span><br></pre></td></tr></tbody></table></figure>





<h4 id="安装vim"><a href="#安装vim" class="headerlink" title="### 安装vim"></a>### 安装 vim</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install vim</span><br></pre></td></tr></tbody></table></figure>





<h3 id="安装pipenv，因为网络的问题，要使用国内的镜像源来加速-全局安装，要不pipenv"><a href="#安装pipenv，因为网络的问题，要使用国内的镜像源来加速-全局安装，要不pipenv" class="headerlink" title="安装pipenv，因为网络的问题，要使用国内的镜像源来加速(全局安装，要不pipenv)"></a>安装 pipenv，因为网络的问题，要使用国内的镜像源来加速 (全局安装，要不 pipenv)</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo -H pip3 install -U pipenv -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">find / -name pipenv</span><br></pre></td></tr></tbody></table></figure>

<p>创造软连接</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -s /var/jenkins_home/python3/bin/pipenv /usr/bin/pipenv</span><br></pre></td></tr></tbody></table></figure>



<h4 id="解决pip加载慢"><a href="#解决pip加载慢" class="headerlink" title="解决pip加载慢"></a>解决 pip 加载慢</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple -r requirements.txt</span><br></pre></td></tr></tbody></table></figure>



<h4 id="解决allure安装问题"><a href="#解决allure安装问题" class="headerlink" title="解决allure安装问题"></a>解决 allure 安装问题</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">export NODE_HOME=/&lt;nodejs路径&gt;</span><br><span class="line"></span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin </span><br><span class="line"></span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br><span class="line"></span><br><span class="line">npm install -g allure-commandline --save-dev</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h4 id="解决系统时间不同步的问题"><a href="#解决系统时间不同步的问题" class="headerlink" title="解决系统时间不同步的问题"></a>解决系统时间不同步的问题</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">// 进入docker对应容器，删除/etc/localtime</span><br><span class="line">sudo docker exec -it -u root jenkins /bin/bash</span><br><span class="line">rm -rf /etc/localtime</span><br><span class="line">// 回到宿主机，复制本地系统时间文件夹到对应docker容器/etc/localtime中</span><br><span class="line">sudo docker cp /usr/share/zoneinfo/Asia/Shanghai &lt;CONTAINER_ID&gt;:/etc/localtime</span><br></pre></td></tr></tbody></table></figure>







<h3 id="同步docker两个容器的mysql数据"><a href="#同步docker两个容器的mysql数据" class="headerlink" title="同步docker两个容器的mysql数据"></a>同步 docker 两个容器的 mysql 数据</h3><h4 id="在宿主机安装crontab"><a href="#在宿主机安装crontab" class="headerlink" title="在宿主机安装crontab"></a>在宿主机安装 crontab</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sudo yum install vixie-cron crontabs</span><br></pre></td></tr></tbody></table></figure>

<h4 id="查看定时任务列表"><a href="#查看定时任务列表" class="headerlink" title="查看定时任务列表"></a>查看定时任务列表</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></tbody></table></figure>

<h4 id="新建定时任务命令"><a href="#新建定时任务命令" class="headerlink" title="新建定时任务命令"></a>新建定时任务命令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></tbody></table></figure>

<h4 id="宿主机执行定时任务"><a href="#宿主机执行定时任务" class="headerlink" title="宿主机执行定时任务"></a>宿主机执行定时任务</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">30 7 * * * bash /home/test/mysql-backup.sh</span><br></pre></td></tr></tbody></table></figure>

<h4 id="定时设置解释"><a href="#定时设置解释" class="headerlink" title="定时设置解释"></a>定时设置解释</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">*    *    *    *    *</span><br><span class="line">-    -    -    -    -</span><br><span class="line">|    |    |    |    |</span><br><span class="line">|    |    |    |    +----- 星期中星期几 (0 - 7) (星期天 为0)</span><br><span class="line">|    |    |    +---------- 月份 (1 - 12) </span><br><span class="line">|    |    +--------------- 一个月中的第几天 (1 - 31)</span><br><span class="line">|    +-------------------- 小时 (0 - 23)</span><br><span class="line">+------------------------- 分钟 (0 - 59)</span><br></pre></td></tr></tbody></table></figure>

<h4 id="启动定时crond服务"><a href="#启动定时crond服务" class="headerlink" title="启动定时crond服务"></a>启动定时 crond 服务</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></tbody></table></figure>

<h4 id="查看crond服务状态"><a href="#查看crond服务状态" class="headerlink" title="查看crond服务状态"></a>查看 crond 服务状态</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></tbody></table></figure>

<h4 id="删除所有定时任务命令"><a href="#删除所有定时任务命令" class="headerlink" title="删除所有定时任务命令"></a>删除所有定时任务命令</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">crontab -r</span><br></pre></td></tr></tbody></table></figure>

<h4 id="数据库备份与更新脚本-mysql-backup-sh"><a href="#数据库备份与更新脚本-mysql-backup-sh" class="headerlink" title="数据库备份与更新脚本 mysql-backup.sh"></a>数据库备份与更新脚本 mysql-backup.sh</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"># 设置mysql的登录用户名和密码(根据实际情况填写)</span><br><span class="line">mysql_user="root"</span><br><span class="line">mysql_password="1z2x3c4v5b6n7m"</span><br><span class="line">mysql_prod_id="51ea579affb7"</span><br><span class="line">mysql_dev_id="34aa0aed191e"</span><br><span class="line"></span><br><span class="line"># 设置需要备份的数据库</span><br><span class="line">db_chuman_qa_platform="chuman_qa_platform"</span><br><span class="line">db_chuman523="chumanAndroid523"</span><br><span class="line">db_chuman530="chumanAndroid530"</span><br><span class="line">db_chuman542="chumanAndroid542"</span><br><span class="line">db_chuman550="chumanAndroid550"</span><br><span class="line"></span><br><span class="line"># 备份文件存放宿主机路径(根据实际情况填写)</span><br><span class="line">backup_location=/home/test/mysql-backup</span><br><span class="line"></span><br><span class="line">#如果文件夹不存在则创建</span><br><span class="line">if [ ! -d $backup_location ]; </span><br><span class="line">then </span><br><span class="line"> mkdir -p $backup_location; </span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># 是否删除过期数据</span><br><span class="line">expire_backup_delete="ON"</span><br><span class="line">expire_days=30</span><br><span class="line">backup_time=`date +%Y%m%d%H%M`</span><br><span class="line">backup_dir=$backup_location</span><br><span class="line">welcome_msg="Welcome to use MySQL backup tools!"</span><br><span class="line"></span><br><span class="line"># 备份mysql-prod库中的chuman_qa_platform表数据到宿主机目录下</span><br><span class="line">sudo docker exec $mysql_prod_id mysqldump -u$mysql_user -p$mysql_password $db_chuman_qa_platform device_transfer_record devices &gt; $backup_dir/$database-$backup_time.sql</span><br><span class="line"># 备份mysql-dev库中的chmanAndroid相关库数据到宿主机目录下</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman523 &gt; $backup_dir/$db_chuman523-$backup_time.sql</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman530 &gt; $backup_dir/$db_chuman530-$backup_time.sql</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman542 &gt; $backup_dir/$db_chuman542-$backup_time.sql</span><br><span class="line">sudo docker exec $mysql_dev_id mysqldump -u$mysql_user -p$mysql_password $db_chuman550 &gt; $backup_dir/$db_chuman550-$backup_time.sql</span><br><span class="line">echo "mysqldump success ok !"</span><br><span class="line"></span><br><span class="line"># 更新导入数据到mysql-dev中</span><br><span class="line">sudo docker exec -i $mysql_dev_id mysql -u$mysql_user -p$mysql_password $db_chuman_qa_platform &lt; $backup_dir/$database-$backup_time.sql;</span><br><span class="line">echo "update dev success ok !"</span><br><span class="line"># 更新导入数据到mysql-prod中</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman523 &lt; $backup_dir/$db_chuman523-$backup_time.sql;</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman530 &lt; $backup_dir/$db_chuman530-$backup_time.sql;</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman542 &lt; $backup_dir/$db_chuman542-$backup_time.sql;</span><br><span class="line">sudo docker exec -i $mysql_prod_id mysql -u$mysql_user -p$mysql_password $db_chuman550 &lt; $backup_dir/$db_chuman550-$backup_time.sql;</span><br><span class="line">echo "update prod success ok !"</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>docker</tag>
        <tag>服务器</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 基础教学</title>
    <url>/2025/01/04/Docker%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Docker 是一个平台，任何一台装有 Docker 的机器上你都可以建立、发布、运行你的应用程序。</p>
<h3 id="为什么要使用？"><a href="#为什么要使用？" class="headerlink" title="为什么要使用？"></a>为什么要使用？</h3><ul>
<li>最关键的一句话：使用 Docker 可以省事、省时、省钱。</li>
<li>用来取代虚拟机；</li>
<li>Docker 可以在几毫秒内为您提供一个沙盒环境。</li>
<li>Docker 有助于将一个复杂系统分解为一系列可组合的部分，这使您能够以一种更加离散的方式对服务进行推理。</li>
<li>Docker 在一台机器上起成百上千个独立的容器，有助于模拟网络，使网络建模成为一件轻而易举的事情。</li>
<li>由于你可以将所有系统打包进你的 Docker 容器，所以可以移动工作，甚至脱网离线工作。</li>
<li>减少调试开销</li>
<li> Docker 强迫你记录软件依赖，方便你其他地方布局或者安装软件。</li>
<li>实现持续交付</li>
</ul>
<h3 id="Docker的核心概念"><a href="#Docker的核心概念" class="headerlink" title="Docker的核心概念"></a>Docker 的核心概念</h3><p>容器：一个镜像的运行实例就是一个容器。</p>
<h3 id="Docker的架构"><a href="#Docker的架构" class="headerlink" title="Docker的架构"></a>Docker 的架构</h3><p>熟悉 Docker 的结构是理解并使用好它的关键。Docker 使用客户端 - 服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。Docker 容器通过 Docker 镜像来创建。容器与镜像的关系类似于面向对象编程中的对象与类。</p>
<h3 id="试行"><a href="#试行" class="headerlink" title="试行"></a>试行</h3><ul>
<li>打开命令行终端，通过运行简单的 Docker 映像 <a href="https://hub.docker.com/_/hello-world/">hello-world 来</a>测试安装是否正常 ：</li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run hello-world</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>启动 Dockerized Web 服务器。像 <code>hello-world</code> 上面的图像一样，如果在本地找不到该图像，Docker 将其从 Docker Hub 中拉出。</li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --detach --publish=80:80 --name=webserver nginx</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>在 Web 浏览器中，转到 <code>http://localhost/</code> 以查看 nginx 主页。由于我们指定了默认的 HTTP 端口，因此无需<code>:80</code> 在 URL 末尾附加 。</li>
</ul>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/image-20200709140904550.png" alt="image-20200709140904550"></p>
<ul>
<li>在 Web 服务器运行时（使用 <code>docker container ls</code> 或 <code>docker ps</code>）查看容器上的详细信息 ：</li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">c88fe43672b0        docker/getting-started   "/docker-entrypoint.…"   11 minutes ago      Up 10 minutes       0.0.0.0:80-&gt;80/tcp   interesting_cohen</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>使用以下命令停止并删除容器和图像。使用 “全部” 标志（<code>--all</code> 或 <code>-a</code>）查看停止的容器。</li>
</ul>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container stop webserver</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">ls</span> -a</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker container <span class="built_in">rm</span> webserver</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">rm</span> nginx</span></span><br></pre></td></tr></tbody></table></figure>



<h3 id="首选项"><a href="#首选项" class="headerlink" title="首选项"></a>首选项</h3><p>从菜单栏中选择 Docker 菜单<img src="https://docs.docker.com/docker-for-mac/images/whale-x.png" alt="鲸鱼菜单">&gt; <strong>Preferences</strong>，然后配置下面描述的运行时选项。</p>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/prefs.png" alt="Docker上下文菜单"></p>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/prefs-general.png" alt="优先"></p>
<p>在<strong>常规</strong>选项卡上，您可以配置何时启动和更新 Docker：</p>
<ul>
<li><p><strong>登录时启动 Docker Desktop</strong>：打开会话时自动启动 Docker Desktop。</p>
</li>
<li><p><strong>自动检查更新</strong>：默认情况下，Docker Desktop 自动检查更新并在更新可用时通知您。您可以随时通过从 Docker 主菜单中选择<strong>检查更新</strong>来手动检查更新。</p>
</li>
<li><p><strong>在 Time Machine 备份中包括 VM</strong>：选择此选项以备份 Docker Desktop 虚拟机。默认情况下禁用此选项。</p>
</li>
<li><p><strong>将 Docker 登录名安全地存储在 macOS 钥匙串中</strong>：默认情况下，Docker Desktop 将您的 Docker 登录凭据存储在 macOS 钥匙串中。</p>
</li>
<li><p><strong>发送使用情况统计信息</strong>：Docker Desktop 发送诊断，崩溃报告和使用情况数据。此信息可帮助 Docker 改善应用程序并进行故障排除。清除复选框以选择退出。</p>
<p>单击 “ <strong>切换到 Edge 版本”</strong> 以了解有关 Docker Desktop Edge 版本的更多信息。</p>
</li>
</ul>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>在<strong>资源</strong>选项卡允许您配置 CPU，内存，磁盘，代理，网络和其他资源。</p>
<p>在 “高级” 选项卡上，您可以限制可用于 Docker 的资源。</p>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/prefs-advanced.png" alt="高级首选项设置-高级"></p>
<p>高级设置为：</p>
<p><strong>CPU</strong>：默认情况下，Docker Desktop 设置为使用主机上可用处理器数量的一半。要提高处理能力，请将其设置为更大的数字；减少，减少数字。</p>
<p><strong>内存</strong>：默认情况下，Docker Desktop 设置为使用 <code>2</code>GB 运行时内存，该内存是从 Mac 上的总可用内存分配的。要增加 RAM，请将其设置为更大的数字。要减少它，请降低数字。</p>
<p><strong>交换</strong>：根据需要配置交换文件的大小。默认值为 1 GB。</p>
<p><strong>磁盘映像大小</strong>：指定<strong>磁盘映像的大小</strong>。</p>
<p><strong>磁盘映像位置</strong>：指定 Linux 卷的容器和映像的存储位置。</p>
<p>您也可以将磁盘映像移动到其他位置。如果尝试将磁盘映像移动到已有的映像，则会出现提示询问您是否要使用现有映像或替换现有映像。</p>
<h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><p>使用文件共享可允许 Mac 上的本地目录与 Linux 容器共享。这对于在运行和测试容器中的代码时在主机上的 IDE 中编辑源代码特别有用。默认情况下 <code>/Users</code>，<code>/Volume</code>，<code>/private</code>，<code>/tmp</code> 和 <code>/var/folders</code> 目录共享。如果您的项目不在此目录中，则必须将其添加到列表中。否则，你可能会得到 <code>Mounts denied</code> 或 <code>cannot start service</code> 在运行时错误。</p>
<p>文件共享设置为：</p>
<ul>
<li><p><strong>添加目录</strong>：单击 <code>+</code> 并导航到要添加的目录。</p>
</li>
<li><p><strong>Apply＆Restart</strong> 通过 Docker 的 bind mount（<code>-v</code>）功能使目录可用于容器。</p>
<p>可以共享的目录有一些限制：</p>
<ul>
<li>该目录不得在 Docker 内部存在。</li>
</ul>
</li>
</ul>
<p>有关更多信息，请参见：</p>
<ul>
<li><a href="https://docs.docker.com/docker-for-mac/osxfs/">osxfs 文件系统共享</a>主题中的 <a href="https://docs.docker.com/docker-for-mac/osxfs/#namespaces">命名空间</a>。</li>
<li><a href="https://docs.docker.com/docker-for-mac/troubleshoot/#volume-mounting-requires-file-sharing-for-any-project-directories-outside-of-users">卷挂载要求共享文件 <code>/Users</code></a>。）<a href="https://docs.docker.com/docker-for-mac/troubleshoot/#volume-mounting-requires-file-sharing-for-any-project-directories-outside-of-users">以外的任何项目目录</a></li>
</ul>
<h4 id="代理人"><a href="#代理人" class="headerlink" title="代理人"></a>代理人</h4><p>Docker Desktop 从 macOS 中检测 HTTP / HTTPS 代理设置，并将其自动传播到 Docker。例如，如果将代理设置设置为 <code>http://proxy.example.com</code>，则 Docker 在提取容器时会使用此代理。</p>
<p>但是，您的代理设置不会传播到您启动的容器中。如果要为容器设置代理设置，则需要为其定义环境变量，就像在 Linux 上一样，例如：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -e HTTP_PROXY=http://proxy.example.com:3128 alpine <span class="built_in">env</span></span></span><br><span class="line"></span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">HOSTNAME=b7edf988b2b5</span><br><span class="line">TERM=xterm</span><br><span class="line">HOME=/root</span><br><span class="line">HTTP_PROXY=http://proxy.example.com:3128</span><br></pre></td></tr></tbody></table></figure>

<p>有关设置用于运行容器的环境变量的更多信息，请参见<a href="https://docs.docker.com/engine/reference/commandline/run/#set-environment-variables--e---env---env-file">设置环境变量</a>。</p>
<h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><p>您可以配置 Docker 桌面网络以在虚拟专用网络（VPN）上工作。指定网络地址转换（NAT）前缀和子网掩码以启用 Internet 连接。</p>
<h3 id="Docker引擎"><a href="#Docker引擎" class="headerlink" title="Docker引擎"></a>Docker 引擎</h3><p>Docker Engine 页面允许您配置 Docker 守护程序以确定容器的运行方式。</p>
<p>在框中输入 JSON 配置文件以配置守护程序设置。有关选项的完整列表，请参阅《 Docker Engine <a href="https://docs.docker.com/engine/reference/commandline/dockerd/">dockerd 命令行参考》</a>。</p>
<p>单击 “ <strong>应用并重新启动”</strong> 以保存您的设置并重新启动 Docker Desktop。</p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>在 “命令行” 页面上，您可以指定是否启用实验功能。</p>
<p>实验功能提供了对未来产品功能的早期访问。这些功能仅用于测试和反馈，因为它们可能在版本之间更改而不会发出警告，或者可以从将来的版本中完全删除。实验功能不得在生产环境中使用。Docker 不提供对实验功能的支持。</p>
<blockquote>
<p>要在 Docker CLI 中启用实验性功能，请编辑 <code>config.json</code> 文件并将其设置 <code>experimental</code> 为 enabled。</p>
<p>要从 Docker Desktop 菜单启用实验功能，请单击 <strong>设置</strong>（在 macOS 上为 <strong>Preferences</strong>）&gt; <strong>命令行</strong>，然后打开 “ <strong>启用实验功能”</strong> 开关。单击 “ <strong>应用并重新启动”</strong>。</p>
</blockquote>
<p>有关 Docker CLI 中当前实验功能的列表，请参阅 <a href="https://github.com/docker/cli/blob/master/experimental/README.md">Docker CLI 实验功能</a>。</p>
<p>在 Docker Desktop Edge 和 Stable 版本上，您都可以打开和关闭实验功能。如果您关闭实验性功能，则 Docker 桌面将使用当前普遍可用的 Docker Engine 版本。</p>
<p>您可以在命令行上查看是否正在运行实验模式。如果 <code>Experimental</code> 为 <code>true</code>，则 Docker 将以实验模式运行，如下所示。（如果 <code>false</code>，则实验模式关闭。）</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.8</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.17</span><br><span class="line"> Git commit:        afacb8b</span><br><span class="line"> Built:             Wed Mar 11 01:21:11 2020</span><br><span class="line"> OS/Arch:           darwin/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.8</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.17</span><br><span class="line">  Git commit:       afacb8b</span><br><span class="line">  Built:            Wed Mar 11 01:29:16 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          v1.2.13</span><br><span class="line">  GitCommit:        7ad184331fa3e55e52b890ea95e65ba581ae3429</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc10</span><br><span class="line">  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h3><p>Docker Desktop 包含一个可在 Mac 上运行的独立 Kubernetes 服务器，因此您可以测试在 Kubernetes 上部署 Docker 工作负载。</p>
<p>Kubernetes 客户端命令 <code>kubectl</code> 包括在内，并配置为连接到本地 Kubernetes 服务器。如果您 <code>kubectl</code> 已经安装并指向其他环境，例如 <code>minikube</code> 或 GKE 集群，请确保更改上下文，以便 <code>kubectl</code> 指向 <code>docker-desktop</code>：</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config get-contexts</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl config use-context docker-desktop</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果您是 <code>kubectl</code> 用 Homebrew 或通过其他方法安装的，并且遇到冲突，请删除 <code>/usr/local/bin/kubectl</code>。</p>
<ul>
<li><p>要启用 Kubernetes 支持并安装作为 Docker 容器运行的 Kubernetes 独立实例，请选择 <strong>Enable Kubernetes</strong>。要将 Kubernetes 设置为 <a href="https://docs.docker.com/docker-for-mac/kubernetes/#override-the-default-orchestrator">默认协调器</a>，请<a href="https://docs.docker.com/docker-for-mac/kubernetes/#override-the-default-orchestrator">默认</a>选择将 <strong>Docker 堆栈部署到 Kubernetes</strong>。</p>
<p>单击 “ <strong>应用并重新启动”</strong> 以保存设置。这将实例化将 Kubernetes 服务器作为容器运行所需的映像，并将 <code>/usr/local/bin/kubectl</code> 命令安装在 Mac 上。</p>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/kube.png" alt="启用Kubernetes"></p>
<p>启用并运行 Kubernetes 后，``Docker 桌面设置’’对话框的右下角将显示一个附加状态栏项目。</p>
<p>Kubernetes 的状态显示在 Docker 菜单中，上下文指向 <code>docker-desktop</code>。</p>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/kube-context.png" alt="带有Kubernetes的Docker菜单"></p>
</li>
<li><p>默认情况下，Kubernetes 容器对诸如之类的命令是隐藏的 <code>docker service ls</code>，因为不支持手动管理它们。要使其可见，请选择<strong>显示系统容器（高级）</strong>，然后单击<strong>应用并重新启动</strong>。大多数用户不需要此选项。</p>
</li>
<li><p>要随时禁用 Kubernetes 支持，请清除 “ <strong>启用 Kubernetes”</strong> 复选框。Kubernetes 容器将停止并删除，并且该 <code>/usr/local/bin/kubectl</code> 命令也将删除。</p>
<p>有关将 Kubernetes 集成与 Docker Desktop 结合使用的更多信息，请 <a href="https://docs.docker.com/docker-for-mac/kubernetes/">参阅在 Kubernetes 上部署</a>。</p>
</li>
</ul>
<h3 id="重设"><a href="#重设" class="headerlink" title="重设"></a>重设</h3><blockquote>
<p>重置和重启选项</p>
<p>在 Docker Desktop Mac 上，**<code>** **疑难解答''**菜单中提供了**</code> 重启 Docker 桌面’’<strong>，</strong>``** ** 重置为出厂默认值’’** 以及其他重置选项。</p>
</blockquote>
<p>有关重置选项的信息，请参阅<a href="https://docs.docker.com/docker-for-mac/troubleshoot/">日志和故障排除</a>。</p>
<h2 id="仪表板"><a href="#仪表板" class="headerlink" title="仪表板"></a>仪表板</h2><p>Docker Desktop Dashboard 使您可以与容器和应用程序进行交互，并直接从计算机管理应用程序的生命周期。仪表板 UI 会显示所有正在运行，已停止和已启动的容器及其状态。它提供了一个直观的界面来执行常见的操作，以检查和管理容器以及现有的 Docker Compose 应用程序。有关更多信息，请参阅 <a href="https://docs.docker.com/desktop/dashboard/">Docker Desktop Dashboard</a>。</p>
<h2 id="添加TLS证书"><a href="#添加TLS证书" class="headerlink" title="添加TLS证书"></a>添加 TLS 证书</h2><p>您可以将可信证书颁发机构（CA）（用于验证注册表服务器证书）和客户端证书（用于对注册表进行身份验证）添加到 Docker 守护程序。</p>
<h3 id="添加自定义CA证书（服务器端）"><a href="#添加自定义CA证书（服务器端）" class="headerlink" title="添加自定义CA证书（服务器端）"></a>添加自定义 CA 证书（服务器端）</h3><p>支持所有受信任的 CA（根或中间 CA）。Docker Desktop 根据 Mac 密钥链创建所有用户信任的 CA 的证书捆绑包，并将其附加到 Moby 信任的证书。因此，如果主机上的用户信任企业 SSL 证书，则 Docker Desktop 会信任它。</p>
<p>要手动添加自定义的自签名证书，请先将证书添加到 macOS 钥匙串中，然后由 Docker Desktop 获取。这是一个例子：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ca.crt</span><br></pre></td></tr></tbody></table></figure>

<p>或者，如果您只想将证书添加到自己的本地钥匙串中（而不是对所有用户），请运行以下命令：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ security add-trusted-cert -d -r trustRoot -k ~/Library/Keychains/login.keychain ca.crt</span><br></pre></td></tr></tbody></table></figure>

<p>另请参阅<a href="https://docs.docker.com/docker-for-mac/#directory-structures-for-certificates">证书的目录结构</a>。</p>
<blockquote>
<p><strong>注意</strong>：您需要在对钥匙串或 <code>~/.docker/certs.d</code> 目录进行任何更改后重新启动 Docker Desktop ，以使更改生效。</p>
</blockquote>
<p>有关如何执行此操作的完整说明，请参阅博客文章 “ <a href="http://container-solutions.com/adding-self-signed-registry-certs-docker-mac/">将自签名注册表证书添加到 Docker 和 Mac 的 Docker 桌面”</a>。</p>
<h3 id="添加客户端证书"><a href="#添加客户端证书" class="headerlink" title="添加客户端证书"></a>添加客户端证书</h3><p>您可以将客户证书放在 <code>~/.docker/certs.d/&lt;MyRegistry&gt;:&lt;Port&gt;/client.cert</code> 和中 <code>~/.docker/certs.d/&lt;MyRegistry&gt;:&lt;Port&gt;/client.key</code>。</p>
<p>Docker Desktop 应用程序启动时，它将 <code>~/.docker/certs.d</code> Mac 上的文件夹复制到 <code>/etc/docker/certs.d</code>Moby（Docker Desktop <code>xhyve</code> 虚拟机）上的目录。</p>
<blockquote>
<ul>
<li>您需要在对钥匙串或 <code>~/.docker/certs.d</code> 目录进行任何更改后重新启动 Docker Desktop ，以使更改生效。</li>
<li>该注册表不能被列为<em>不安全的注册表</em>（请参阅 <a href="https://docs.docker.com/docker-for-mac/#docker-engine">Docker</a> Engine。Docker Desktop 会忽略<em>不安全的注册表</em>下列出的证书，并且不发送客户端证书。<code>docker run</code> 此类尝试从注册表中提取的命令会在命令行上生成错误消息，以及在注册表上。</li>
</ul>
</blockquote>
<h3 id="证书的目录结构"><a href="#证书的目录结构" class="headerlink" title="证书的目录结构"></a>证书的目录结构</h3><p>如果具有此目录结构，则无需手动将 CA 证书添加到 Mac OS 系统登录名：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/Users/&lt;user&gt;/.docker/certs.d/</span><br><span class="line">└── &lt;MyRegistry&gt;:&lt;Port&gt;</span><br><span class="line">   ├── ca.crt</span><br><span class="line">   ├── client.cert</span><br><span class="line">   └── client.key</span><br></pre></td></tr></tbody></table></figure>

<p>以下内容进一步说明和解释了使用自定义证书的配置：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/etc/docker/certs.d/        &lt;-- Certificate directory</span><br><span class="line">└── localhost:5000          &lt;-- Hostname:port</span><br><span class="line">   ├── client.cert          &lt;-- Client certificate</span><br><span class="line">   ├── client.key           &lt;-- Client key</span><br><span class="line">   └── ca.crt               &lt;-- Certificate authority that signed</span><br><span class="line">                                the registry certificate</span><br></pre></td></tr></tbody></table></figure>

<p>只要 CA 证书也在钥匙串中，您也可以具有此目录结构。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/Users/&lt;user&gt;/.docker/certs.d/</span><br><span class="line">└── &lt;MyRegistry&gt;:&lt;Port&gt;</span><br><span class="line">    ├── client.cert</span><br><span class="line">    └── client.key</span><br></pre></td></tr></tbody></table></figure>

<p>要了解有关如何为注册表安装 CA 根证书以及如何设置客户端 TLS 证书进行验证的更多信息，请参阅 Docker Engine 主题中的<a href="https://docs.docker.com/engine/security/certificates/">使用证书验证存储库客户端</a>。</p>
<h2 id="安装外壳完成"><a href="#安装外壳完成" class="headerlink" title="安装外壳完成"></a>安装外壳完成</h2><p>Docker Desktop 随附脚本，用于启用 <code>docker</code> 和 <code>docker-compose</code> 命令的完成。补全脚本可以 <code>Docker.app</code> 在 <code>Contents/Resources/etc/</code> 目录中的内找到，并且可以安装在 Bash 和 Zsh 中。</p>
<h3 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h3><p>Bash <a href="https://www.debian-administration.org/article/316/An_introduction_to_bash_completion_part_1">内置了对完成的支持</a>要激活 Docker 命令的完成，需要将这些文件复制或符号链接到您的 <code>bash_completion.d/</code> 目录。例如，如果您通过 <a href="http://brew.sh/">Homebrew</a> 安装了 bash ：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">etc=/Applications/Docker.app/Contents/Resources/etc</span><br><span class="line">ln -s $etc/docker.bash-completion $(brew --prefix)/etc/bash_completion.d/docker</span><br><span class="line">ln -s $etc/docker-compose.bash-completion $(brew --prefix)/etc/bash_completion.d/docker-compose</span><br></pre></td></tr></tbody></table></figure>

<p>将以下内容添加到您的 <code>~/.bash_profile</code>：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[ -f /usr/local/etc/bash_completion ] &amp;&amp; . /usr/local/etc/bash_completion</span><br></pre></td></tr></tbody></table></figure>

<p>要么</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">if [ -f $(brew --prefix)/etc/bash_completion ]; then</span><br><span class="line">. $(brew --prefix)/etc/bash_completion</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h3><p>在 Zsh 中，<a href="http://zsh.sourceforge.net/Doc/Release/Completion-System.html">完成系统</a>负责处理事务。要激活 Docker 命令的完成功能，需要将这些文件复制或符号链接到您的 Zsh <code>site-functions/</code> 目录。例如，如果您通过 <a href="http://brew.sh/">Homebrew</a> 安装了 Zsh ：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">etc=/Applications/Docker.app/Contents/Resources/etc</span><br><span class="line">ln -s $etc/docker.zsh-completion /usr/local/share/zsh/site-functions/_docker</span><br><span class="line">ln -s $etc/docker-compose.zsh-completion /usr/local/share/zsh/site-functions/_docker-compose</span><br></pre></td></tr></tbody></table></figure>

<h3 id="Fish-Shell"><a href="#Fish-Shell" class="headerlink" title="Fish-Shell"></a>Fish-Shell</h3><h3 id="Fish-Shell还支持制表符完成系统。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell-completions-目录。"><a href="#Fish-Shell还支持制表符完成系统。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell-completions-目录。" class="headerlink" title="Fish-Shell还支持制表符完成系统。要激活Docker命令的完成功能，需要将这些文件复制或符号链接到Fish-shell completions/ 目录。"></a>Fish-Shell 还支持制表符<a href="https://fishshell.com/docs/current/#tab-completion">完成系统</a>。要激活 Docker 命令的完成功能，需要将这些文件复制或符号链接到 Fish-shell <code>completions/</code> 目录。</h3><p>创建 <code>completions</code> 目录：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mkdir -p ~/.config/fish/completions</span><br></pre></td></tr></tbody></table></figure>

<p>现在，从 docker 添加完成。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ln -shi /Applications/Docker.app/Contents/Resources/etc/docker.fish-completion ~/.config/fish/completions/docker.fish</span><br><span class="line">ln -shi /Applications/Docker.app/Contents/Resources/etc/docker-compose.fish-completion ~/.config/fish/completions/docker-compose.fish</span><br></pre></td></tr></tbody></table></figure>

<h2 id="提供反馈并获得帮助"><a href="#提供反馈并获得帮助" class="headerlink" title="提供反馈并获得帮助"></a>提供反馈并获得帮助</h2><p>要获得社区的帮助，请查看当前用户主题，加入或开始讨论，登录到我们的 <a href="https://forums.docker.com/c/docker-for-mac">Docker Desktop for Mac 论坛</a>。</p>
<p>要报告错误或问题，请<a href="https://github.com/docker/for-mac/issues">在 GitHub 上</a>登录 Docker Desktop <a href="https://github.com/docker/for-mac/issues">for Mac 问题</a>，您可以在其中查看社区报告的问题并提出新问题。有关更多详细信息，请参见 <a href="https://docs.docker.com/docker-for-mac/troubleshoot/">日志和故障排除</a>。</p>
<p>有关提供有关文档反馈或自己进行更新的信息，请参阅 “ <a href="https://docs.docker.com/opensource/">贡献文档”</a>。</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>从 Docker 桌面菜单中选择<strong>登录 / 创建 Docker ID</strong> 以访问您的 <a href="https://hub.docker.com/">Docker Hub</a> 帐户。登录后，您可以直接从 Docker Desktop 菜单访问 Docker Hub 存储库和组织。</p>
<p>有关更多信息，请参考以下 <a href="https://docs.docker.com/docker-hub/">Docker Hub 主题</a>：</p>
<ul>
<li><a href="https://docs.docker.com/docker-hub/orgs/">Docker Hub 中的组织和团队</a></li>
<li><a href="https://docs.docker.com/docker-hub/builds/">建物</a></li>
</ul>
<h3 id="两因素认证"><a href="#两因素认证" class="headerlink" title="两因素认证"></a>两因素认证</h3><p>Docker Desktop 使您可以使用两因素身份验证登录 Docker Hub。当访问您的 Docker Hub 帐户时，两要素身份验证提供了额外的安全层。</p>
<p>您必须先在 Docker Hub 中启用双重身份验证，然后才能通过 Docker Desktop 登录到 Docker Hub 帐户。有关说明，请参阅<a href="https://docs.docker.com/docker-hub/2fa/">为 Docker Hub 启用两因素身份验证</a>。</p>
<p>启用两因素身份验证后：</p>
<ol>
<li>转到 Docker Desktop 菜单，然后选择<strong>登录 / 创建 Docker ID</strong>。</li>
<li>输入您的 Docker ID 和密码，然后单击<strong>登录</strong>。</li>
<li>成功登录后，Docker Desktop 会提示您输入身份验证代码。输入手机的六位数代码，然后点击<strong>验证</strong>。</li>
</ol>
<p><img src="/Users/damon/Dropbox/dreampix/docker/%E5%9B%BE%E7%89%87/desktop-mac-2fa.png" alt="Docker桌面2FA"></p>
<p>成功通过身份验证后，您可以直接从 Docker Desktop 菜单访问您的组织和存储库。</p>
<h3 id="将docker修改镜像源"><a href="#将docker修改镜像源" class="headerlink" title="将docker修改镜像源"></a>将 docker 修改镜像源</h3><blockquote>
<p>在 <code>/etc/docker/daemon.json</code> 文件中添加下面参数</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">   "registry-mirrors" : ["https://almtd3fa.mirror.aliyuncs.com"]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>没有该文件则自行创建</p>
</blockquote>
<h3 id="最后重启docker服务"><a href="#最后重启docker服务" class="headerlink" title="最后重启docker服务"></a>最后重启 docker 服务</h3><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>教学</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins 项目配置</title>
    <url>/2020/01/06/Jenkins%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="Jenkins-项目chuman-qa-platform-server"><a href="#Jenkins-项目chuman-qa-platform-server" class="headerlink" title="Jenkins 项目chuman-qa-platform-server "></a>Jenkins 项目 <a href="http://192.168.216.210:8080/job/chuman-qa-platform-server/">chuman-qa-platform-server </a></h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行项目脚本</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ps -ef | grep gunicorn | grep -v grep | awk <span class="string">'{print $2}'</span>| xargs <span class="built_in">sudo</span> <span class="built_in">kill</span> -9</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">防止jenkins部署完毕自动删除进程</span></span><br><span class="line">BUILD_ID=DONTKILLME</span><br><span class="line"></span><br><span class="line">pid=`ps -ef | grep gunicorn | grep -v grep | awk '{print $2}'`</span><br><span class="line">echo $pid</span><br><span class="line">if [ -n "$pid" ]</span><br><span class="line">then</span><br><span class="line">  	kill -9 $pid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">pip3 install -r requirements.txt </span><br><span class="line"></span><br><span class="line">source set_flask_env.sh prod </span><br><span class="line"></span><br><span class="line">export PATH=$PATH:/var/jenkins_home/python3/bin/</span><br><span class="line"></span><br><span class="line">gunicorn manage:app -c gunicorn.conf.py</span><br><span class="line"></span><br><span class="line">sleep 3</span><br><span class="line"></span><br><span class="line">pid_result=`ps -ef | grep gunicorn | grep -v grep | awk '{print $2}'`</span><br><span class="line"></span><br><span class="line">echo $pid_result</span><br><span class="line"></span><br><span class="line">if [ -n "$pid_result" ]</span><br><span class="line">then</span><br><span class="line">	exit 0</span><br><span class="line">else</span><br><span class="line">	exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h3 id="jenkins项目-chuman-api-test-new"><a href="#jenkins项目-chuman-api-test-new" class="headerlink" title="jenkins项目 chuman-api-test-new"></a>jenkins 项目 chuman-api-test-new</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取上游项目的执行环境，并设置接口测试对应的执行环境</span></span><br><span class="line">echo "hashversion=${hashversion}"</span><br><span class="line">echo "envir=${envir}"</span><br><span class="line">echo "debug_info=${debug_info}"</span><br><span class="line">echo "describe=${describe}"</span><br><span class="line">envir_tmp=${envir#*/}</span><br><span class="line">envir=${envir_tmp%.*}</span><br><span class="line"></span><br><span class="line">if [ $envir == 'demo-u-api' ];then</span><br><span class="line">  test_env='demo'</span><br><span class="line">    exec_file='testsuites/P0_demo_testsuite.yml'</span><br><span class="line">    config_file='env/demo.env'</span><br><span class="line">elif [ $envir == 'api2-u-api' ];then</span><br><span class="line">    test_env='api2'</span><br><span class="line">    exec_file='testsuites/P0_api2_testsuite.yml'</span><br><span class="line">    config_file='env/api2.env'</span><br><span class="line">elif [ $envir == 'demo-cf-api' ];then</span><br><span class="line">    test_env='demo-cf'</span><br><span class="line">    exec_file='testsuites/P0_demo_cf_testsuite.yml'</span><br><span class="line">    config_file='env/demo_cf.env'</span><br><span class="line">elif [ $envir == 'api2-cf-api' ];then</span><br><span class="line">    test_env='api2-cf'</span><br><span class="line">    exec_file='testsuites/P0_api2_cf_testsuite.yml'</span><br><span class="line">    config_file='env/api2_cf.env'</span><br><span class="line">else</span><br><span class="line">    test_env='none'</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断是否需要执行测试</span></span><br><span class="line">if [ $test_env == 'none' ];then</span><br><span class="line">  echo "构建环境是$envir，不需要执行接口测试"</span><br><span class="line">else</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">旧项目变量</span></span><br><span class="line">  project_name=chuman-api-test</span><br><span class="line">  report_html=reports/$BUILD_NUMBER.html</span><br><span class="line">  exec_file_tmp=${exec_file#*/}</span><br><span class="line">  report_json="logs/testsuites/${exec_file_tmp%.*}.summary.json"</span><br><span class="line">  log_url=$BUILD_URL/console</span><br><span class="line">  show_report_url="http://qa-report-dev.chumanapp.com/"</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">新项目变量</span></span><br><span class="line">  new_project_name=chuman-api-test-new</span><br><span class="line">  new_report_html=allure-report/$BUILD_NUMBER/index.html</span><br><span class="line">  new_report_dir=allure-report/$BUILD_NUMBER  </span><br><span class="line">  file_name='testcases'</span><br><span class="line">  prometheusData="allure-report/$BUILD_NUMBER/export/prometheusData.txt"</span><br><span class="line">  behaviors_json="allure-report/$BUILD_NUMBER/data/test-cases/behaviors.json"</span><br><span class="line">  status_json="allure-report/$BUILD_NUMBER/widgets/status-chart.json"</span><br><span class="line">  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">公共变量</span></span><br><span class="line">  test_time=$(date "+%Y-%m-%d %H:%M:%S")</span><br><span class="line">  ding_url='https://oapi.dingtalk.com/robot/send?access_token=83f04c75d4ec2a260b8bf7e959c98374cfaebd34b4973dac03a838d20c217287'</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行旧项目脚本</span></span><br><span class="line">  cd chuman-api-test</span><br><span class="line">  pipenv install --skip-lock</span><br><span class="line">  pipenv run hrun $exec_file --dot-env-path $config_file --log-level debug --save-tests --report-file $report_html</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行旧项目报告生产数据</span></span><br><span class="line">  if [ -f $report_html ];then</span><br><span class="line">    show_report_dir="/data/qa-report/"</span><br><span class="line">    show_report_name="${JOB_NAME}报告_$BUILD_NUMBER.html"</span><br><span class="line"></span><br><span class="line">    # 把生成的报告移动到展示的目录下</span><br><span class="line">    cp $report_html ${show_report_dir}${show_report_name}</span><br><span class="line"></span><br><span class="line">    report_url=$show_report_url$show_report_name</span><br><span class="line">        echo $report_url</span><br><span class="line">    case_total=$(cat $report_json | jq '.stat.testcases.total')</span><br><span class="line">    case_success=$(cat $report_json | jq '.stat.testcases.success')</span><br><span class="line">    case_fail=$(cat $report_json | jq '.stat.testcases.fail')</span><br><span class="line">    fail_module=''</span><br><span class="line">      if [ $case_fail != '0' ];then</span><br><span class="line">        for index in `seq 0 $case_total`</span><br><span class="line">        do</span><br><span class="line">          success=$(cat $report_json | jq -r ".details[$index].success")</span><br><span class="line">          if [ $success == 'false' ];then</span><br><span class="line">            name=$(cat $report_json | jq -r ".details[$index].name")</span><br><span class="line">            fail_module=$fail_module$'\n'$name</span><br><span class="line">          fi</span><br><span class="line">        done</span><br><span class="line">      else</span><br><span class="line">        fail_module='无'</span><br><span class="line">    fi</span><br><span class="line">  fi  </span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行新项目脚本</span></span><br><span class="line">  cd ..</span><br><span class="line">  cd chuman-api-test-new</span><br><span class="line">  pipenv install --skip-lock</span><br><span class="line">  pipenv run pytest $file_name --env=$test_env </span><br><span class="line">  allure generate reports -o allure-report/$BUILD_NUMBER --clean</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">执行新项目报告生产数据</span></span><br><span class="line">  if [ -f $new_report_html ];then</span><br><span class="line">    new_show_report_dir="/data/qa-report/"</span><br><span class="line">    new_show_report_name="qa-p1p2报告_allure_report_$BUILD_NUMBER"</span><br><span class="line"></span><br><span class="line">    # 把生成的报告移动到展示的目录下</span><br><span class="line">    cp -r $new_report_dir ${new_show_report_dir}${new_show_report_name}</span><br><span class="line">    new_report_url=$show_report_url$new_show_report_name</span><br><span class="line">    echo $new_report_url</span><br><span class="line"></span><br><span class="line">    run_num=`grep "launch_retries_run" $prometheusData|awk '{print $NF}'`</span><br><span class="line">    passed_num=`grep "launch_status_passed" $prometheusData|awk '{print $NF}'`</span><br><span class="line">    failed_num=`grep "launch_status_failed" $prometheusData|awk '{print $NF}'`</span><br><span class="line">    broken_num=`grep "launch_status_broken" $prometheusData|awk '{print $NF}'`</span><br><span class="line">    skipped_num=`grep "launch_status_skipped" $prometheusData|awk '{print $NF}'`</span><br><span class="line"></span><br><span class="line">    broken_module=''</span><br><span class="line">      if [ $broken_num != '0' ] || [ $failed_num != '0' ];then</span><br><span class="line">        for index in `seq 0 $run_num`</span><br><span class="line">        do</span><br><span class="line">          result=$(cat $status_json | jq ".[$index].status")</span><br><span class="line">          echo $result</span><br><span class="line">          if [[ $result == '"broken"' ]] || [[ $result == '"failed"' ]];then</span><br><span class="line">            broken_name=$(cat $status_json | jq ".[$index].name")</span><br><span class="line">            tmp="${broken_name%\"}"</span><br><span class="line">            broken_name="${tmp#\"}"</span><br><span class="line">            echo $broken_name</span><br><span class="line">            broken_module=$broken_module$'\n'$broken_name</span><br><span class="line">            echo $broken_module</span><br><span class="line">          fi</span><br><span class="line">        done</span><br><span class="line">      else</span><br><span class="line">        broken_module='无'</span><br><span class="line">    fi</span><br><span class="line">    # 统计所有项目执行数据</span><br><span class="line">    run_sum=$(($case_total+$run_num-$skipped_num))</span><br><span class="line">    success_sum=$(($case_success+$passed_num))</span><br><span class="line">    failed_sum=$(($failed_num+$broken_num+$case_fail))</span><br><span class="line">    if [[ $fail_module == '无' ]] &amp;&amp; [[ $broken_module == '无' ]];then</span><br><span class="line">    	failed_module='无'</span><br><span class="line">    elif [ $fail_module == '无' ];then</span><br><span class="line">    	failed_module=$broken_module</span><br><span class="line">    elif [ $broken_module == '无' ];then</span><br><span class="line">    	failed_module=$fail_module</span><br><span class="line">    else </span><br><span class="line">    	failed_module=$fail_module$'\n'$broken_module</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">	ding_message="后端${test_env}环境代码发布\n发布用户：${BUILD_USER}\n代码hash：${hashversion}\ndebug_info：${debug_info}\n发布描述：${describe}\n\n触漫接口自动化测试执行完毕，以下为执行结果：\n执行环境：${test_env}\n执行时间：${test_time}\n测试场景总数：${run_sum}\n成功场景数：${success_sum}\n失败场景数：${failed_sum}\n\n失败涉及模块：${failed_module}\n触漫P0接口测试报告：$report_url\n触漫P1~P2接口报告：$new_report_url"</span><br><span class="line">	curl $ding_url \</span><br><span class="line">   		-H 'Content-Type: application/json' \</span><br><span class="line">   		-d  '{"msgtype": "text",</span><br><span class="line">       			"text": {</span><br><span class="line">       		    		"content": "'"${ding_message}"'"</span><br><span class="line">       			}</span><br><span class="line">      		}'</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>



<h3 id="jenkins-项目-chuman-ui-test"><a href="#jenkins-项目-chuman-ui-test" class="headerlink" title="jenkins 项目 chuman-ui-test"></a>jenkins 项目 chuman-ui-test</h3><figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ ${app_url} != '' ];then</span><br><span class="line">    echo ${app_url}</span><br><span class="line">	cd ${WORKSPACE}/app/</span><br><span class="line">	rm -rf *.apk</span><br><span class="line">    curl -O ${app_url}</span><br><span class="line">    if [ -e *.apk ];then</span><br><span class="line">    	adb install -r *.apk</span><br><span class="line">    else</span><br><span class="line">    	echo '安装包下载失败'</span><br><span class="line">    cd ${WORKSPACE}</span><br><span class="line">    fi</span><br><span class="line">else</span><br><span class="line">	echo '旧包执行'</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">git pull origin master</span><br><span class="line"></span><br><span class="line">rm -rf ${WORKSPACE}/allure_results/</span><br><span class="line">rm -rf ${WORKSPACE}/allure_report/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">lsof -i:22471|sed -n '2p'|awk '{print $2}' | xargs kill -9 || True</span><br><span class="line">ps -ef |grep Nemu |grep -v grep |awk '{print $2}' |xargs kill -9 || True</span><br><span class="line">open /Applications/NemuPlayer.app</span><br><span class="line">sleep 15s</span><br><span class="line">res_adb=`adb devices`</span><br><span class="line">on='device'</span><br><span class="line">echo ${res_adb}</span><br><span class="line">if [[ ${res_adb} == *${on} ]];then</span><br><span class="line">    echo '------ keep running ------'</span><br><span class="line">else</span><br><span class="line">	echo '------ restart adb server ------'</span><br><span class="line">	adb kill-server</span><br><span class="line">	adb start-server</span><br><span class="line">	sleep 5s</span><br><span class="line">    res_adb=`adb devices`</span><br><span class="line">    echo ${res_adb}</span><br><span class="line">    if [[ ${res_adb} == *${on} ]];then</span><br><span class="line">        echo '------ keep running ------'</span><br><span class="line">    else</span><br><span class="line">    	echo '------ server not start ------'</span><br><span class="line">	fi</span><br><span class="line">fi</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">ps aux |grep appium |grep -v grep |awk '{print $2}' |xargs kill -9</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">bash adb_del_picture.sh</span><br><span class="line">rm -rf appium.log</span><br><span class="line">touch appium.log</span><br><span class="line">appium_log_content=`cat appium.log`</span><br><span class="line">test="started"</span><br><span class="line">result=""</span><br><span class="line">while [ "$result" == "" ]; do</span><br><span class="line">    echo "appium still not started!Try again!"</span><br><span class="line">    bash startAppium.sh</span><br><span class="line">    sleep 2</span><br><span class="line">    appium_log_content=`cat appium.log`</span><br><span class="line">    result=$(echo ${appium_log_content} | grep "${test}")</span><br><span class="line">done </span><br><span class="line">ps -ef |grep appium</span><br><span class="line">cat appium.log</span><br><span class="line">sleep 2</span><br></pre></td></tr></tbody></table></figure>

<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">pytest -v -s -m=${mark} ./testcases/${module}  --alluredir ${WORKSPACE}/allure_results</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/jenkins%E6%9E%84%E5%BB%BA1.png" alt="image-20201014154819459"></p>
<p><img src="https://raw.githubusercontent.com/DamonKoy/document/dev/images/jenkins%E6%9E%84%E5%BB%BA2.png" alt="image-20201014154846581"></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>编程笔记</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>pytest</tag>
      </tags>
  </entry>
</search>
